nvim
cd ~/.config/alacritty
ls
nvim
cd ~/.config/alacritty
git clone https://github.com/alacritty/alacritty-theme
nvim 
$nu.config-path
nuget 
nvim
nvim alacritty.toml
cd ~/.config/alacritty
nvim alacritty.toml
cd 
l
cd ~/.config/alacritty
nvim
:q
cd ~/.config/alacritty
nvim alacritty.toml
bat ~/.profile.home-manager.backup
cat ~/.profile.home-manager.backup
rm ~/.profile.home-manager.backup
nvim ~/.profile
cd ~/.config/alacritty
nvim alacritty.toml
nvim
clear
ls
nvim
ls
cd ~/.config/alacritty/
cd ..
ls
nvim 
cd nvim
nvim
cd ..
ls
cd nushell/
ls
cargo install bat
nvim
cargo install cargo-mommy
brew install tmux
cd ~/.config/tmux/
ls
nvmi tmux.conf
nvim tmux.conf
tmux
nvim tmux.conf
tmux
nvim tmux.conf
tmux
tmux -c
brew install carapace
tmux
nvim tmux.conf
tmux
chsh
bat /etc/shells 
bat /etc/shells.before-nix-darwin 
mv /etc/shells.before-nix-darwin /etc/shells
rm /etc/shells
sudo rm /etc/shells
mv /etc/shells.before-nix-darwin /etc/shells
sudo mv /etc/shells.before-nix-darwin /etc/shells
chsh
tmux
ls
clear
tmxu
tmux
ls
tmux --help
tmux source ~/.config/tmux/tmux.conf
tmux
cd ~/.config/tmux/
nvim tmj
nvim tmux.conf 
tmux
killall tmux
tmux
killall tmux
nvim tmux.conf 
cd ~/.config/tmux/
nvim tmux.conf 
tmux
killall tmux
nvim
nvim tmux.conf 
tmux
nvim tmux.conf 
tmux
killall tmux
tmux
killall tmux
nvim tmux.conf 
tmux
nvim tmux.conf 
tmux
nvim
tmux
nvim tmux.conf 
cd ~/.zshrc
nvim ~/.zshrc
tmux
tmux.conf
nvim tmux.conf 
$env.PATH
nvim
tmux
nvim ~/.zshrc
tmux
nvim ~/.zshrc
nvim tmux.conf
tmux source ~/.config/tmux/tmux.conf
nvim tmux.conf
tmux source ~/.config/tmux/tmux.conf
tmux
$env.PATH
nvim
tmux
cd ~/.config/nushell/
nvim 
tmux-sessionizer 
brew install fzf
tmux-sessionizer 
nvim
clear
ls
nvim
brew install --cask rio
cd ~/.config/rio/
tmux-sessionizer
ls
cd ~/.config/rio/
ls
cd ~/.config/rio/
git clone https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/rio
git clone https://github.com/mbadolato/iTerm2-Color-Schemes
mv iTerm2-Color-Schemes/rio ./themes
ls
rm -rf iTerm2-Color-Schemes/
nvim
tmux a
nvim
clear
cargo install bat
cargo install helix
cargo install exa
cargo install fd-find
cargo install dioxus-cli
pfetch
tmux-sessionizer
dx serve
cargo update -p wasm-bindgen --precise 0.2.99
cargo update -p wasm-bindgen --precise 0.2.97
dx serve
cd ..
rm -rf dx-test/
dx 
dx new
tx new tx-test
dx new tx-test
cd tx-test/
dx serve
cd ..
rm tx-test/
rm -rf dx-test/
dx new dx-test
cd dx-test/
dx serve
clear
ls
cd ..
rm -rf dx-test/
dx new dx-test
cd dx-test
ls
cargo add chrono --features serde<\n>cargo add futures<\n>cargo add reqwest --features json<\n>cargo add serde --features derive<\n>cargo add serde_json<\n>cargo add async_recursion
cargo add chrono --features serde;<\n>cargo add futures;<\n>cargo add reqwest --features json;<\n>cargo add serde --features derive;<\n>cargo add serde_json;<\n>cargo add async_recursion;
cargo add chrono --features serde
ls
cd ..
rm -rf dx-test/
dx new dx-test
cd dx-test
cargo add chrono --features serde;<\n>cargo add futures;<\n>cargo add reqwest --features json;<\n>cargo add serde --features derive;<\n>cargo add serde_json;<\n>cargo add async_recursion;
nvim
dx serve
yes
clear
yes
clear
tmux-sessionizer 
clear
ls
tmuxls
ls
clear
nvim
cd ~/.config
ls
nvim
brew install massscan
brew install --cask massscan
brew install masscan
masscan 0.0.0.0/0 -p0-65535 
masscan 0.0.0.0/0 -p0-65535 --exclude 255.255.255.255
# masscan 0.0.0.0/0 -p0-65535 --max-rate 100000 -oX scan.xml
masscan 0.0.0.0/0 -p0-65535 --max-rate 100000 -oX scan.xml
masscan 0.0.0.0/0 -p0-65535 --exclude 255.255.255.255 --max-rate 100000 -oX scan.xml
masscan 0.0.0.0/0 -p0-65535 --exclude 255.255.255.255 --max-rate 10000000 -oX scan.xml
masscan 0.0.0.0/0 -p0-65535 --exclude 255.255.255.255 --max-rate 1000000000 -oX scan.xml
masscan 0.0.0.0/0 -p0-65535 --exclude 255.255.255.255 --max-rate 1000000000000 -oX scan.xml
cargo install tinymist
cargo install typs-cli --locked
cargo install typst-cli --locked
ls
nvim
tmux-ses
l
brew install inkscape
nvim
cargo install --git https://github.com/Myriad-Dreamin/tinymist --locked tinymist
$env.XDG_CONFIG_HOME ++ nushl
$env.XDG_CONFIG_HOME ++ /nushell/custom/commands
$nu.config-path
$nu.config-path | path dirname 
($nu.config-path | path dirname) ++ custom-commands.nu
($nu.config-path | path dirname) ++ /custom-commands.nu
source custom_commands.nu
($nu.config-path | path dirname) ++ /custom-commands.nu
nvim custom_commands.nu 
source custom_commands.nu
nvim custom_commands.nu 
source custom_commands.nu
tmux-sessionizer
ls
defaults write com.apple.finder CreateDesktop false<\n>killall Finder
clear
brew inst
brew install sioyek
clear
nivm
kitten themes
cd ~/.config/alacritty/
nvim
tmux
tmux list-clients 
tmux list-sessions 
tmux list-sessions | columns 
tmux list-sessions | detect columns
tmux list-sessions | i|detect columns
tmux list-sessions | lines 
help commands 
help commands | explore
tmux list-sessions | lines | skip 
tmux list-sessions | lines | skip | detect columns 
tmux list-sessions | skip | detect columns 
tmux list-sessions | into string | skip | detect columns 
tmux list-sessions | into string
tmux list-sessions | into string | detect columns | skip
tmux list-sessions | into string | detect columns --no-headers --skip 1
tmux list-sessions | into string | detect columns --no-headers --skip 1 | get 0
tmux list-sessions | into string | detect columns --no-headers --skip 1 | select 0
tmux list-sessions | into string | detect columns --no-headers --skip 1 | select column0
tmux list-sessions | into string | detect columns --no-headers --skip 1 | select column0 | each {|| str replace ':' ''}
tmux list-sessions | str replace ":" "" | detect columns --no-headers --skip 1 | select column0
tmux list-sessions | str replace --all ":" "" | detect columns --no-headers --skip 1 | select column0
tmux list-sessions | str replace --all ":" "" | detect columns --no-headers --skip 1 | select column0 | into string
tmux list-sessions | str replace --all ":" "" | detect columns --no-headers --skip 1 | select column0 | to nuon
cd ~/.config/nushell
nvim tmux-sessionizer.nu 
tmux list-sessions | str replace --all ":" "" | detect columns --no-headers --skip 1 | select column0 | to nuon
tmux list-sessions | str replace --all ":" "" | detect columns --no-headers --skip 1 | select column0 | flatten
tmux list-sessions | str replace --all ":" "" | detect columns --no-headers --skip 1 | get column0
nvim custom_commands.nu 
source custom_commands.nu
:q!
tmux-sessionizer
cd ~/.config/tmux
nvim
tmux-sessionizer
cd ~
ls
tmux-sessionizer
cd .config/nvim
cd ..
cd nushell/
nvim
ls
clear
ls
cd ~/.config/tmux
ls
cd ..
ls
cd ~/.config/nushell
nvim tmux-sessionizer.nu 
tmux-sessionizer
mv notes/physik_lernblatt/ notes/wellen
ls notes
mv notes/wellen/ notes/physik_wellen
nvim
mkdir -p ~/.config/inkscape/extensions<\n>cd ~/.config/inkscape/extensions<\n>git clone https://github.com/herlev/inktyp<\n>cd inktyp<\n>cargo install --path .
bash
tmux source ~/.config/tmux/tmux.conf
nvim
:q
brew install orcaslicer 
rm -rf /Applications/OrcaSlicer.app/
brew install orcaslicer 
tmux-sessionizer
tmux list-sessions
tmux-sessionizer
tmux-attach
tmux-attach 
cd ~/projects/
cargo new sdl3_test
carg add sdl3
cargo add sdl3
cargo add wgpu
cargo add pollster
carg run
cargo run
brew install sdl3
cargo run
carg run
cargo run
sdl
cargo add sdl2
brew install sdl2
cargo run
ld
cargo add sdl3 --features build_from_source
cargo add sdl3 --features build-from-source
cargo run
brew install cmake
cargo run
nvim
tmux-sessionizer 
$env.PROJECT_DIRS = [ stuff, other_stuff ]
$env.PROJECT_DIRS
clear
cd ~/zmk-config/
ls
cd config/ls
cd config
l
ls
nvim
tmux-sessionizer 
cd ~/.config/nushell
source tmux-sessionizer.nu
tmux-attach 
ls
tmux-sessionizer 
nvim ~/.config
NuGet
nuget 
tmux-sessionizer 
nvim ~/.config/nushell/
tmux-sessionizer 
fw
nvim ~/.config/nushell/
tmux-sessionizer 
tmux-sessionizer 
nvim ~/.config/nushell/
cd ~/
cd ~/projects/
fzf-tmux 
fzf --border rounded 
fzf --border rounded --height 25%
cd ~/projects/
fzf --border rounded --height 25%
fzf --tmux
tmux a
nvim tmux-sessionizer.nu 
source tmux-sessionizer.nu
tmux-sessionizer 
"tmux" in $env.TERM
if ("tmux" in $env.TERM) { fzf --tmux } else fzf
let in_tmux = "tmux" in $env.TERM; if ($in_tmux) { fzf --tmux } else fzf
let in_tmux = "tmux" in $env.TERM; if $in_tmux { fzf --tmux } else fzf
nvim
nvim tmux-sessionizer.nu 
source tmux-sessionizer.nu
tmux-sessionizer 
source tmux-sessionizer.nu
tmux-sessionizer 
fzf --tmux bottom,40%
tmux-sessionizer 
fzf --border left 
fzf --border sharp 
fzf --border vertical 
source tmux-sessionizer.nu
tmux-sessionizer 
fzf --preview 
fzf --preview bat
brew install bat
cargo install bat
bat
bat custom_commands.nu 
fzf --preview "bat --no-paging"
fzf --preview "cat"
fzf --preview 'bat {}'
fzf --preview 'bat {}' --border sharp
fzf --preview 'bat --color=always {}' --border sharp
nvim tmux-sessionizer.nu 
tmux --height 10
fzf --height 10
fzf --height 1
tmux-sessionizer 
cd ~/projects/
cargo new bevytest
cd bevytest/
cargo add bevy
nvim
cargo install bacon
cargo install bacon --locked
brew install lld
cargo add bevy -F dynamic_linking
cargo run
cargo tree
tmux-sessionizer 
tmux-attach 
cd ~/.config/nushell
nvim
tmux-sessionizer 
cd ~/Downloads/
ls
cd ~/
cargo run
cargo add bevy_avian
cargo add avian3d
cargo add bevy_flycam
cargo add bevy_generative
cargo build
cargo add rand
cargo build
cargo run
cargo runh
cargo run
bacon
tmux-sessionizer 
clear
ls
dx serve
nvim
tmux-sessionizer 
nvim .aerospace.toml 
dx serve
nvim
dx 
dx build
dx serve
tmux-sessionizer 
cd projects/
cargo new personal_website_v2
cd personal_website_v2/
nvim
cargo init
ls
git log
git commit -m "initial commit"
git conifg --global user.email "ben@kirschniak.de"
git config --global user.email "ben@kirschniak.de"
git config --global user.name "Ben Kirschniak"
git log
git commit -m "initial commit"
git add .
git commit -m "initial commit"
git log
clear
nvim
carg add maud
cargo add maud
cargo add tiny-http
nvim
cargo run
cargo install cargo-watch
bacon
cargo watch
cargo watch --help
cargo add comrak
cargo watch -x run
cargo add strum
cargo add strum_macros
nvim
cargo add ascii
nvim
clear
cargo build
cargo run
cargo watch -x run
clear
cloc
brew install cloc
cloc
cloc .
touch .gitignore
nvim
nvim .gitignore 
nvim .gitignore src/ assets/
cloc .gitignore src/ assets/
git add style assets src
git diff
git add Cargo.toml 
git diff
git commit -m "home page running setup infrastructure"
bacon
cargo watch -x run
oc .i
cloc src assets style
cargo test 
cargo run --release
yazi
brew install yazi
brew remove yazi
carog install yzi
carog install yazy
carog install yazi
cargo install yazi
cargo install --locked yazi-fm yazi-cli
yazi
ls
nvim
cargo watch -x run
cargo add once_cell
cargo watch -x run
cargo build 
cargo build --release -
cargo build --release
nvim
tmux-sessionizer 
tmux-sessionizer 
cd ..
clear
cd 
nvim
git diff
git add -u 
git diff
git commit -m "initial website done"
git remote add origin https://github.com/BiggerBen13/website.git
git branch -M main
git push -u origin main
git add photos
git log
git diff
git rm -r photos/
git rm -r --cached photos/
ls
git add photos/
git diff
git log
git status
git rm -r --cached photos/*
git commit -m "added empty photo folder"
git add src/photography.rs 
git 
git commit -m "added photography.rs"
ls
git push -u origin main
cloc src styli
cloc src style
brew install pass
pass
pass help 
pass insert biggerben.de D&Yz6p*lgawyt3T0
pass insert biggerben.de
pass biggerben.de 
ssh 91.204.46.76
pass biggerben.de
pass show --clip biggerben.de
ssh 91.204.46.76
clear
D&Yz6p*lgawyt3T0<\n>
ssh 91.204.46.76
ping google.com
ssh 91.204.46.76
ssh biggerben.de
ssh 91.204.46.76
ping biggerben.de
ssh 91.204.46.76
D&Yz6p*lgawyt3T0 | pbcopy
"D&Yz6p*lgawyt3T0" | pbcopy
pbpaste
man ssh
"D&Yz6p*lgawyt3T0" | ssh 91.204.46.76
ssh 91.204.46.76
ping biggerben.de
ssh biggerben.de
ssh 91.204.46.76
ssh biggerben/91.204.46.76
ssh biggerben@91.204.46.76
ping biggerben.de
ssh 91.204.46.76
ping biggerben.de
ssh 91.204.46.76
ssh hosting127457@91.204.46.76
clear
ssh hosting127457@91.204.46.76
cargo run --release
ssh hosting127457@91.204.46.76
ping biggerben.de
ssh hosting127457@91.204.46.76
ssh hosting137457@91.204.46.76
ping biggerben.de
ssh hosting137457@91.204.46.76
ssh hosting137457@biggerben.de
ping biggerben.de:20
ping biggerben.de -p 20
ssh hosting137457@biggerben.de
ssh biggerben.de
ssh hosting137457@biggerben.de
ssh-add 
ssh-copy-id 
ssh-copy-id -i /etc/ssh/ssh_host_ed25519_key.pub hosting137457@biggerben.de
ls .ssh
ssh-copy-id -i ~/.ssh/id_rsa.pub hosting137457@biggerben.de
ssh hosting137457@biggerben.de
ls
git pull
ls
tmux-sessionizer 
nvim .github/workflows/
git status
git add .github/workflows/rust.yml 
git commit -m "updated workflow"
git push -u origin main
nvim .github/workflows/
git commit -am "updated workflow"
git push -u origin main
git tag 
git help tag
git tag -a v1.0 -m "first stable website"
git tag
git status
git push -u origin main
git push origin main v1.0
cargo build
rustup --version
rustc --version
cargo build --locked
ssh add biggerben.de
rustup toolchain 
rustup toolchain list
rustup toolchain install stable
rustup set 
rustup default stable 
cargo build
cargo build --release
cargo bench 
cargo build --locked --release --target-dir out
cd out/
ls
cd release
ls
cd build
ls
cd ..
ls
ls deps
clear
ls
./personal_website
nvim .github/workflows/rust.yml 
ls
cargo clean
ls
rm -r out
ls
cargo build --target 
rustup target list
cargo build --target x86_64-unknown-linux-gnu
rustup target add x86_64-unknown-linux-gnu 
cargo build --target x86_64-unknown-linux-gnu
brew install x86_64-linux-gnu-binutils
cargo build --target x86_64-unknown-linux-gnu
brew install SergioBenitez/osxct/x86_64-unknown-linux-gnu
ls
cd
ls
cargo build --release --target-dir out
cd out
ls
cd release/
ls
nivm
nvim
cd ..
nvim .github/workflows/rust.yml 
git add .github/workflows/rust.yml 
git tag -d v1.0 
git tag -a v1.0 -m "first stable website"
git commit -am "updated workflow"
git log
git tag -d v1.0 
git log
git tag -a v1.0 -m "first stable website"
ls
git log
git push origin main v1.0
git tag -d v1.0 
git tag -a v1.0.0 -m "first stable website"
git push origin main v1.0
git push origin main v1.0.0
git tag -d v1.0.0
nvim .github/workflows/rust.yml 
git add .github/workflows/rust.yml 
git commit -am "updated workflow"
git tag -a v1.0.0 -m "first stable website"
git push origin main v1.0.0
ls
cd Downloads/
curl -O https://github.com/BiggerBen13/website/releases/download/v1.0.0/personal_website
curl https://github.com/BiggerBen13/website/releases/download/v1.0.0/personal_website
curl -LO https://github.com/BiggerBen13/website/releases/download/v1.0.0/personal_website
nvim
nvim .github/workflows/rust.yml 
git add .github/workflows/rust.yml 
git commit -am "updated workflow"
rustup target add x86_64-unknown-linux-musl
cargo build --release --target-dir out --target x86_64-unknown-linux-musl
nvim .github/workflows/rust.yml 
git commit -am "updated workflow"
git tag -a v1.0.1 -m "musl static linking"
git push origin main v1.0.1
nvim .github/workflows/rust.yml 
nvim .github/workflows/rust.yml 
git commit -am "updated workflow"
git tag -d v1.0.1
git tag -a v1.0.1 -m "musl static linking"
git push origin main v1.0.1
git commit -am "updated workflow"
git tag -d v1.0.1
git tag -a v1.0.1 -m "musl static linking"
https://github.com/BiggerBen13/website/releases/download/v1.0.0/personal_website
git push origin main v1.0.1
nvim .github/workflows/rust.yml 
git commit -am "updated workflow"
git tag -d v1.0.1
git tag -a v1.0.1 -m "musl static linking"
git push origin main v1.0.1
cd Downloads/
cd ~/Downloads/
sudo curl -o latest -L https://securedownloads.cpanel.net/latest
curl -o latest -L https://securedownloads.cpanel.net/latest
nvim latest 
tmux a
rustup target add wasm32-unknown-unknown 
rustup target 
rustup target list --installed 
cargo build --release --target-dir out --target wasm32-unknown-unknown
ls
ls out
cd out/wasm32-unknown-unknown/
ls
cd release/
ls
cd ..
nvim .github/workflows/rust.yml 
git commit -am "updated workflow"
git tag -d v1.0.1
git tag -a v1.0.1 -m "musl static linking"
ls out
git push origin main v1.0.1
nvim .github/workflows/rust.yml 
git commit -am "updated workflow"
git tag -d v1.0.1
git tag -a v1.0.1 -m "musl static linking"
sudo curl -o latest -L https://securedownloads.cpanel.net/latest
git push origin main v1.0.1
nvim .github/workflows/rust.yml 
git commit -am "updated workflow"
git tag -d v1.0.1
git tag -a v1.0.1 -m "musl static linking"
git push origin main v1.0.1
ping
ping nc
nc
nc -v biggerben.de 8000
nc -v biggerben.de
nc -v biggerben.de 8080
nc -v biggerben.de 80
nc -v biggerben.de 8080
nvim
git status
git add src/main.rs
git push origin main v1.0.1
git tag -a v1.0.2 -m "changed service port to 80"
git push origin main v1.0.2
git push origin main
git log
git tag -d v1.0.2
git diff
git status
git commit -am "changed service port to 80"
git push origin main
git tag -a v1.0.2
git push origin main
git push origin main v1.0.2
sudo curl -o latest -L https://securedownloads.cpanel.net/latest
git push origin main v1.0.2
nvim
ssh hosting137457@91.204.46.76
pass show --clip biggerben.de
nvim 
ssh hosting137457@91.204.46.76
lcear
ssh hosting137457@91.204.46.76
ls
clear
new
tmux-sessionizer 
nvim .github/workflows/rust.yml 
cargo build --release
nvim
cd ..
cd personal_website_backup/
ls
cargo build --release
nvim
cd .
cd ..
ls
cd personal_website/
nvim
cargo run --release
tmux a
cargo run
nvim
tmux-sessionizer 
ls
lsblk
brew install lsblk
fdisk -l
fdisk 
df 
fdisk 
diskutil 
diskutil list
diskutil `1`
diskutil
diskutil partitionDisk /dev/disk14
fdisk
fdisk -d /dev/disk14
sudo fdisk -d /dev/disk14
fdisk /dev/disk14 -d
clear
cd .
cd ..
ls
cd ~
ls
rm -r grüne-wahlprogramm-2024
rm test test.json
ls
ls -d | sort-by size
pass
pass google
pass accounts.google.com/ben@kirschniak.de 
pass accounts.google.com/ben@kirschniak.de -c
brew tap amar1729/formulae<\n>brew install <formula>
brew tap amar1729/formulae<\n>brew install amar1729/formulae/browserpass 
cd projects
cargo new tut_os --bin --edition 2018
cd tut_os/
ls
nvim 
cargo build
nvim 
nvim
cargo build
rustup target add thumbv7em-none-eabihf 
cargo build --target thumb7em-none-eabihf
rustc
rustc --print target-spec-json 
rustc -Z --print target-spec-json 
rustc +nightly -Z unstable-options --print target-spec-json 
rustup toolchain install nightly 
rustc +nightly -Z unstable-options --print target-spec-json 
rustc +nightly -Z unstable-options --target=thumb7em-none-eabihf --print target-spec-json 
rustc +nightly -Z unstable-options --print target-list
rustc +nightly -Z unstable-options --target=thumbv7em-none-eabihf --print target-spec-json
cargo rustc -- -C link-args="-e __start -static"
cargo rustc -- -C link-args="-e __start -static -nostartfiles"
ls
cd target
ls
cd debug
ls
./tut_os
cargo build --target thumbv7em-none-eabihf
ls
cd ..
ls
cd thumbv7em-none-eabihf/
ls
cd debug/
ls
./tut_os
cd  ..
ls
cd ..
cd tut_os/
cargo build --target x86_64-tut-os
rustup override 
rustup override set nightly
rustup component add rust-src 
cargo build --target x86_64-tut-os
cargo build --target x86_64-tut-os.json
nvim
cargo install silicon --locked
brew install pkg-config
cargo install silicon --locked
brew deps silicon 
brew install fontconfig
brew deps silicon | brew install
brew deps silicon | brew install $in
brew deps silicon
brew install freetype
brew deps --missing silicon
brew install cairo glib graphite2 harbuzz icu4c@76 libx11 libxau libxcb libxdmcp libxext libxrender lzo prce2 pixman python-packaging xorgproto
brew install cairo glib graphite2 harfbuzz icu4c@76 libx11 libxau libxcb libxdmcp libxext libxrender lzo prce2 pixman python-packaging xorgproto
brew install cairo glib graphite2 harfbuzz icu4c@76 libx11 libxau libxcb libxdmcp libxext libxrender lzo pcre2 pixman python-packaging xorgproto
cargo install silicon --locked
cargo install silicon
brew install silicon
silicon --from-clipboard -l rs --to-clipboard
cargo install bootimage
rustup component add llvm-tools-preview 
cargo bootimage
qemu
brew install qemu
cargo run
mkdir kernel
ls
mv src Cargo.* kernel
cargo init
ls
nvim
cargo build
ls
mv kernel/ tut_kernel
cargo build
nvim
cargo search ovmf-prebuilt
cargo add ovmf-prebuilt
nvim
cargo add ovmf-prebuilt
clear
ls
nvim
cargo build
ls
ls -la
mkdir tut_kernel/.cargo
touch tut_kernel/.cargo/config.toml
nvim .cargo/config.toml 
cargo build
nvim
mv x86_64-tut_os.json tut_kernel/
cargo build
nvim
cargo build
nvim
mv mv tut_kernel/x86_64-tut_os.json ../
mv tut_kernel/x86_64-tut_os.json ./
ls
nvim x86_64-tut_os.json 
cargo build
nvim
cargo build
nvim
cargo build
$env.RUST_BACKTRACE=1; cargo build 
$env.RUST_BACKTRACE = 1; cargo build 
cargo run
cargo build
killall cargo
cargo build
cargo clean
cargo build
cd tut_kernel/
ls
cargo clean
nvim
rm Cargo.lock
cd ..
cargo build
nvim
nvim
cargo build
nvim
cargo build
rustup target add x86_64-unknown-none
cargo build
cargo build
cargo run
nvim
cargo run
qemu-system-x86_64
ls
cd projects/tut_os/
ls
ls target/
ls
ls target/x86_64-unknown-none/debug/
ls target/x86_64-unknown-none/debug/build/
ls target/x86_64-unknown-none/debug/build
nvim
ls
cd target/x86_64-unknown-none/debug/deps/artifact/tut_kernel-a77eee4fecca01d2/
cd target/x86_64-unknown-none/debug/deps/artifact/
cd target/x86_64-unknown-none/debug/deps/
cd ..
ls target/x86_64-unknown-none/debug/deps/
ls target/x86_64-unknown-none/debug/deps/artifact/
ls target/x86_64-unknown-none/debug/deps/artifact/tut_kernel-a77eee4fecca01d2/
ls target/x86_64-unknown-none/debug/deps/artifact/tut_kernel-a77eee4fecca01d2/bin/
ls
ls target/debug/build/
ls target/debug/tut_os
ls
cd target/
ls
cd x86_64-unknown-none/
ls
cd ..
ls
carog build
cargo build
cargo run
cargo build
cargo run
carog build
cargo build
cd tut_kernel/
cargo add embedded_graphics_core
nvim
tmux a
cd ..
ls
cd biggerben/projects/
cargo new iridium --bin
cd iridium/
nvim
cargo test
cd ~/.config/nvim
cargo check
cargo test
carg check
cargo check
cargo test
carg test
cargo test
carg test
cargo test
rustfmt
rustfmt --help
cargo check
cargo test
cargo check
bac0on
tmux-sessionizer 
cd ..
ls
mkdir rust_exercises
cd rust_exercises/
nvim ~/.config/nushell/env.nu 
$env.PROJECT_DIRS + ~/projects/exercises
$env.PROJECT_DIRS + "~/projects/exercises"
$env.PROJECT_DIRS | append "~/projects/exercises"
git clone https://www.github.com/tfpk/macrokata/
cargo install cargo-expand
tmux-sessionizer 
cargo build --bin macrokata
cargo run -- test 01_my_first_macro
cargo expand --help
cargo run -- test 02_numbers
cargo run -- test 03_metavariables
cargo run -- test 03_literal_variables
cargo run -- test 04
cargo run -- test 04_expression_variables
cargo run -- test 05_complex_example
cargo run -- test 05_more_complet_example
cargo run -- test 05_more_complex_example
cargo run -- test 06
cargo run -- test 06_repetition
:w
cargo check
cargo check --bin 07_more_repetition 
cargo run -- test 07_more_repetition
cargo run -- test 08_nested_repetition
cargo run -- test 09_
cargo run -- test 09_abiguity_and_ordering
cargo run -- test 09_ambiguity_and_ordering
cargo run -- test 10_macros_calling_macros
cargo run -- test 11_macro_recursion
cargo run -- run 11_macro_recursion
cargo run --bin11_macro_recursion
cargo run --bin 11_macro_recursion
cargo run -- test 11_macro_recursion
bacon
cargo test check
tmux-sessionizer 
cd ~/projects/rust_exercises/
ls
carog new proc_macro_test
nvim
tmux-sessionizer 
tmux list-sessions 
tmux list-sessions | str replace --all ":" ""
tmux list-sessions | str replace --all ":" "" | detect columns --no-headers --skip 1
tmux list-sessions | str replace --all ":" "" | detect columns --no-headers
tmux list-sessions | str replace --all ":" "" | detect columns --no-headers | select column0
tmux list-sessions | str replace --all ":" "" | detect columns --no-headers | get column0 
tmux list-sessions | str replace --all ":" "" | detect columns --no-headers | get column0 | to nuon 
help to noun
:w
help to nuon
tmux list-sessions | str replace --all ":" "" | detect columns --no-headers | get column0
<\n>def get-sessions [] {<\n>    tmux list-sessions |<\n>    str replace --all ":" "" |<\n>    detect columns --no-headers --skip 1 |<\n>    get column0<\n>}<\n><\n>def tmux-attach [] {<\n>    let selected_session = get-sessions |<\n>        str join "\n" |<\n>        fzf |<\n>        into string |<\n>        str trim<\n><\n>    tmux attach -t $selected_session<\n>}<\n><\n>tmux-attach
<\n>def get-sessions [] {<\n>    tmux list-sessions |<\n>    str replace --all ":" "" |<\n>    detect columns --no-headers |<\n>    get column0<\n>}<\n><\n>export def tmux-attach [] {<\n>    let selected_session = get-sessions |<\n>        str join "\n" |<\n>        fzf |<\n>        into string |<\n>        str trim<\n><\n>    tmux attach -t $selected_session<\n>}
<\n>def get-sessions [] {<\n>    tmux list-sessions |<\n>    str replace --all ":" "" |<\n>    detect columns --no-headers |<\n>    get column0<\n>}<\n><\n>export def tmux-attach [] {<\n>    let selected_session = get-sessions |<\n>        str join "\n" |<\n>        fzf |<\n>        into string |<\n>        str trim<\n><\n>    # tmux attach -t $selected_session<\n>}<\n><\n>tmux-attach
tmux-attach
nvim
nvim
tmux-attach 
killall tmux
ls
"." | path expand 
"." | path expand
tmux-sessionizer ~/coding/
~/coding/ | path expand
~/coding | path expand
~/coding
tmux-sessionizer ~/coding/
tmux-sessionizer 
killall tmux
nvim
tmux 
killall tmux
ls
git clone https://github.com/dtolnay/proc-macro-workshop?tab=readme-ov-file#workflow
https://github.com/dtolnay/proc-macro-workshop
git clone https://github.com/dtolnay/proc-macro-workshop
cd proc-macro-workshop/
ls
tmux-sessionizer ./builder
ls
cargo test
nvim
tmux-sessionizer 
ls
cd ..
cd ~
ls
tmux-sessionizer 
ls
tmux-sessionizer 
cd ~/projects/rust_exercises/
ls
cargo install rustlings
rustlings init
cd rustlings/
rustlings 
tmux-sessionizer 
:w
nvim
tmux-sessionizer 
nvim
ls
cargo clean
ls
ls out
rm -r out
ls
tmux-sessionizer 
cd ..
ls
cargo new fps_test
cd fps_test/
cargo add bevy
cargo add avian3d
clear
cargo build
nvim
cargo watch
tmux-sessionizer 
cd ..
ls
cargo new azalea_bot
cd azalea_bot/
rustup override set nightly
cargo add azalea --git=https://github.com/azalea-rs/azalea
cargo add parking_lot
cargo add tokio --features
cargo add tokio --features 
cargo add tokio --features  --help
cargo add tokio --features --help
cargo add tokio --features full
cargo add tokio --no-default-features 
cargo add tokio --features macros
cargo search anyhow
cargo add anyhow
cargo add chrono --no-default-features 
cargo add chrono --no-default-features --features now clock
cargo add chrono --no-default-features --features now
cargo add chrono --no-default-features --features now clock
cargo add chrono --no-default-features --features now clock/now
cargo add chrono --no-default-features --features clock
cargo build
nvim
cargo add azalea --git=https://github.com/azalea-rs/azalea
cargo build
nvim
cargo check
cargo add uuid
cargo run
cd ~/Documents/test_server/
ls
rm -r *
yazi
ls
java -Xmx1024M -Xms1024M -Xmx4G
java -Xmx1024M -Xms1024M -Xmx4G -jar server.jar nogui
nvim eula.txt 
ncargo check
cargo check
cargo run
java -Xmx1024M -Xms1024M -Xmx4G -jar server.jar nogui
cargo run
ls
nvim ops.json 
nvim server.properties 
cargo run
java -Xmx1024M -Xms1024M -Xmx4G -jar server.jar nogui
cargo check
cargo run
cargo check
cargo run
cargo ckeck
cargo check
cargo run
nvim
:q
tmux-sessionizer 
cd ..
cargo new bevytest
cd bevytest/
cargo add bevy
cargo add bevy --features
tmux-sessionizer
cargo watch
cargo run
java -Xmx1024M -Xms1024M -Xmx4G -jar server.jar nogui
tmux a
cargo run
cargo watch -x run
rustc --explain E0582
rust diff
git diff
nvim
ls
git restore src
branch blog
git branch blog
git branch
git switch blog
cargo check
cargo run
cargo watch -x run
rustup component add clippy
clippy
cargo clippy
git diff
git log
git status
git add src/page.rs 
git add src/util/routes.rs 
git commit -m "rewrote routing"
cargo watch -x run
tmux-sessionizer
nvim
tmux-sessionizer
ssh matdoes.dev
clear
ssh terminal.shop
cargo watch -x run
cargo clippy
cargo clippy --fix
git diff
git add assets/aboutme.md src/main.rs src/page.rs src/util/content.rs src/util/routes.rs .github/workflows/rust.yml 
git commit -m "subrouting working"
cargo clippy --fix
git status
git add src/blog
git commit -m "added blog module"
cloc src
clippy fix 
cargo clippy --fix
cargo clippy --fix --allow-dirty
cargo clippy
cargo clippy --fix
cargo clippy
carog watch -x clippy
cargo watch -x clippy
nvim .gitignore
git status
git add Cargo.lock 
git add blogs
git status
git commit -am "clippy fixes"
cargo clippy --fix
git log
git status
git restore src
cargo clippy --fix
nvim
cargo clippy
cargo clippy --fix
git commit -am "more clippy fixes"
cargo clippy --fix
cargo clippy
cargo run --release
git push origin blog
cargo remove once_cell 
clear
carog build
cargo build
cargo run
cargo tree
cargo build --release
nvim
cargo check
q
cargo check
cargo run
cargo clippy
killall tmux
tmux a
tmux sessionizer
nivm
cargo clippy
cargo run
nvim
ls
nvim assets/aboutme.md 
cargo run
nvim
clear
tmux-sessionizer
cargo build
cargo add bevy --features dynamicERR
cargo add bevy --features dynamic_linking
nvim
clear
cargo run
cargo check
cargo build
tmux-attach 
tmux sessionizer
carg run
cargo run
tmux-attach
cd projects/rust_exercises/
cargo new comrak-test
cd comrak-test/
mkdir blogs
touch blogs/test.md
cargo add comrak
nvim
cargo run
cargo add comrak --no-default-features 
cargo build
cargo add comrak --no-default-features 
cargo build
tmux-sessionizer 
cargo run
tmux-sessionizer 
cargo run
tmux-sessionizer 
cargo search chrono
cargo check
tmux-sessionizer 
cargo run
cargo add chrono --no-default-features --features
cargo add chrono --no-default-features
cargo build
cargo run
tmux sessionizer
tmux-sessionizer 
cargo add chrono --no-default-features
cargo build
nvim
carog add strum
cargo add strum
cargo add strum_macrosERR
cargo add strum_macros
cargo build 
nvim
cargo check
cargo build --release
cargo check
tmux-sessionizer 
git clone https://www.github.com/tfpk/lifetimekata/
cd lifetimekata/
cargo build --package ex01
cd lifetimekata/
cargo check --package ex02
cargo run --package ex02
cargo build --package ex02
cargo run --package ex02
cargo test --package ex02
nvim
tmux-attach
carg check
cargo check
:q
cargo check
cloc src
cargo check
clippy check
cargo clippy
cargo check
cargo run
git log
git diff
git diff --histogram 
git status
git add Cargo.lock Cargo.toml assets/aboutme.md blogs/test.md src/blog/mod.rs src/page.rs src/photography.rs src/ut9
git add Cargo.lock Cargo.toml assets/aboutme.md blogs/test.md src/blog/mod.rs src/page.rs src/photography.rs src/util/routes.rs
clear
git log
git status
git commit -am r
git revert 
git log
git revert 9017
git log
git status
git commit -m "removed strum dependency, created job listing"
git add src/blog/generate.rs 
git commit -m "removed strum dependency, created job listing"
git log
git revert 2447e553
git log
cargo run
cargo watch -x run
cargo clippy
cargo build --release
cargo run
nvim
git status
git add -am
git add -a
git add -am
git add -am "completed blog feature; removed debut statements"
git commit -am "completed blog feature; removed debut statements"
git push origin blog
git push origin main
git rebase blog 
git branch -m blog main
git switch master
git rebase blog
git blog
git switch blog
git rebase master
git rebase main
git switch main
git merge blog
git commit -m "merged blog into main"
git push origin main
git switch main
git branch --delete blog
git log
git pull
git tag -a v1.0.3
git push origin v1.0.3
cargo run --release
tmux-sessionizer
tmux a
tmux-attach
cd ..
ls
cd tx-test/
ls
cd ..
rm -r tx-test/
ls
pass itch.io 
cd ~/gits
ls
cargo run --release
brew install ghostty
cd ~/.config/alacritty/
cd ~/.config/ghostty
ls
nvim config
clear
yazi
clear
nvim
nvim
tmux-sessionizer 
nvim
tmux-sessionizer 
nvim tmux.conf 
:q
tmux source ~/.config/tmux/tmux.conf
nvim tmux.conf 
clear
tmux attaach
tmux attach
tmux-attach 
nvim
tmux-attach
ls
cd ~/.config
ls
cd ..
cd projects/
mkdir rust-gamedev-test
cd rust-gamedev-test/
cargo add winit
cargo init
cargo add winit
cargo add wgpu
nvim
cargo add avian2d
tmux attach
tmux-attach
tmux-sessionizer 
nvim
nvim
tmux a
cd ~/.config/ghostty/
nvim config 
ghostty
ghostty +
ghostty +help
ghostty +show-face
ghostty +list-actions
ghostty +help
ghostty +list-keybinds
nvim config
nvim
tmux-sessionizer
nvim
tmux-attach
tmux-attach 
ls
cd ~/Photos
ls
cd ~
ls
cd Pictures/
ls
rm `Photos Library.photoslibrary/`
cd `Photos Library.photoslibrary/`
ls
nvim
yazi
cd ..
du
du | explore
cd ..
du
du | explore
du | sort-by apparent |explore
carog install du-dust
cargo install du-dust
dunst
dust
cd ~
dust
cd /
dust
cd ~/Library/
dust
cd `Application Support/`
ls
dust
cd PrismLauncher/instances/
ls
dust
yazi
du
dust
cd PVP
ls
dust
cd .minecraft/
dust
cd ~
clear
cd /Volumes/NOTES/
ls
git init
clear
cd Z
cd ~
ls
clear
git status
git init
git add .
ls
git commit -m "push to git"
clear
ls
nvim
cd /Volumes/NOTES/Vault13/
nvim
cd ~/.config
ls
nvim
cd nvim
nvim
cargo install markdown-oxide
cargo install --locked --git https://github.com/Feel-ix-343/markdown-oxide.git markdown-oxide
ls
cd ~/.config
cd nvim
nvim
cd /Volumes/NOTES/Vault13/
nvim
cd ~/.config
ls
nvim
cd ~/.config
cd /Volumes/NOTES/Vault13/
nvim
cd ~/.config
nvim
cd nvim
nvim
cd /Volumes/NOTES/Vault13/
nvim
cd ~/.config/nvim
nvim
cd /Volumes/NOTES/Vault13/
nvim
what the fuck
exit
cd ~/.config/nvim
nvim
cd /Volumes/NOTES/Vault13/
nvim
tmux
cd /Volumes/NOTES/Vault13/
nvim
cd ~/.config/nvim
nvim
cd ~/.config/nvim
nvim
cd /Volumes/NOTES/Vault13/
nvim
ls
cd ~/.config/nushell/
nvim
ls
tmux new-session -s notes -c /Volumes/NOTES/Vault13
ls
rm notes.nu
cd projects
ls
cd ~/projects
ls
nvim
ls
tmux a notes
tmux-attach
brew install imagemagick
nvim
tmux source ~/.config/tmux/tmux.conf
brew install imagemagick
nvim
tmux-sessionizer 
yazi
help def
tmux-sessionizer 
tmux-attach
nvim
y
tmux-sessionizer 
y
yazi
y
ls
tmux a -S notes
tmux a -s notes
tmux a notes
y
tmux-attach
cd ~/projects
mkdir english-gfs
cd english-gfs
touch main.typ
nvim main.typ 
brew install pdfpc 
pdfpc
cargo install --git https://github.com/andreasKroepelin/polylux/ --branch release
polylux2pdfpc 
polylux2pdfpc main.typ
ls
pdfpc main.pdfpc
pdfpc
pdfpc --help
typst compile main.typ
ls
pdfpc main.pdf
pdfpc -S main.pdf
nvim main.typ 
m
typst compile main.typ
pdfpc main.pdf
typst compile main.typ
pdfpc main.pdf
typst compile main.typ
pdfpc main.pdf
typst compile main.typ
pdfpc main.pdf
open main.pdf
skim
brew install skim
typst compile main.typ
pdfpc main.pdf
tmux
nvim
brew install make
cd ~/projects
ls
mkdir byte-interpreter
cd byte-interpreter/
touch main.tc
rm main.tc
touch main.c
nvim main.c
nvim
make
ls
tmux-attach
nvim
make
ls
nvim 
make
cc main.c -lncurses -o out
make
gcc
clang
clang main.c -lncurses main
clang main.c -lncurses -o main
./main
make
brew install gnumake
brew remove make
brew install make
gmake
make
./main
make
rm main
make
main
./main
ls
./test
man ncurses
man pthread
man curses
man ncurses
make
./test
nvim
ls
cd ..
mkdir mac
tmux-sessionizer 
mkdir src
touch Makefile
cargo run
make
touch src/main.c
ls
cd ..
cargo new mac
rm -r amc
rm -r mac
cargo new mac
nvim Makefile 
nvim
clear
ls
9
clear
brew install yt-dlp
yt-dlp 
yt-dlp -f
yt-dlp -
yt-dlp https://www.youtube.com/watch?v=DlyjfI_4Yig
ls
cd Desktop/
yt-dlp -help
yt-dlp -f
yt-dlp -f https://www.youtube.com/watch?v=DlyjfI_4Yig
yt-dlp -F https://www.youtube.com/watch?v=DlyjfI_4Yig
yt-dlp https://www.youtube.com/watch?v=DlyjfI_4Yig
ls
brew install mpv
mpv "Operation Break YouTube - THIS VIDEO WILL SELF DESTRUCT IN 7 HOURS [DlyjfI_4Yig].webm" 
nvim
ls
clear
tmux-attach
clear
ls
cd ..
ls
nivm
clear
yazi
y
cd ..
cd Documents
mkdir blogs
cd blogs
ls
touch why-we-should-loose-nationality
mv why-we-should-loose-nationality why-we-should-loose-nationality.md
nvim why-we-should-loose-nationality.md 
clear
ls
ls
tmux-attach
nvim
ls
pass find google
pass accounts.google.com/ben@kirschniak.de -c
tmux-attach
nvim
cargo add bevy_ecs_ldtk
ls
cd ..
ls
cd SubMarine/
ls
cd ..
rm -r SubMarine/
rm -r `Unreal Projects/`
ls
cd ..
ls
yazi
godot
cd /Applications/
y
brew install godot
Godot
cd ~
godot --help
tmux-sessionizer
rm -r ~/project
ls
clear
ls
cargo new "rust-src" --lib
cd rust-src/
ls
cargo add godot
ls
touch .gdextension
nvim
cd ..
cd rust-src/
cargo build
ls
ls target
ls
ls target/debug/
touch .gdignore
ls
cd ..
ls
ls -la
ls
ls -la
ls .godot/
ls
ls-
ls -la
mv .gdextension rust-src/rust-src.gdextension
ls -laa
ls -la
cd .godot
ls
ls imported/
bat global_script_class_cache.cfg 
ls -la
touch extension_list.cfg
nivm extension_list.cfg
nvim extension_list.cfg 
nvim .gdextension 
nvim
cd rust-src/
cargo add godot
cd ..
cd rust-src
cd ..
cd rust-src/
cargo build
nvim
ls
ls -la
rm rust-src/
rm -r rust-src/
ls .godot/
ls -la .godot
ls
ls -la
mkdir scripts
tmux-sessionizer
cd ..
ls
tmux-
ls
yzi
yai
yazi
y
cd ..
cargo run --release
cargo watch -x run --release
cargo watch -x "run --release"
cargo run --release
tmux-sessionizer 
tmux-sessionize
tmux-sessionizer
tmux-addch
nvim
tmux-attach
cd ~/projects/rust_exercises/
cargo new quake-map-parsing
cd quake-map-parsing/
nvim
nivm
ls
cargo add shalrath
ls
y
cd ..
cargo run
nvim
cd ~/projects/bevytest/
ls
nvim
tmux-sessionizer 
cargo add shalrath
nvim
tmux-sessionizer 
cargo add thiserror
ls
tmux-sessionizer 
nim
cargo run
cargo run
nvim
tmux a
tmux
nvim
tmux-attach
cargo add nom
cargo run
ls
clear
y
cargo run
y
cargo run
cargo run > log.txt
ls 
cargo run | save log.txt
ls
nvim
cargo run | complete | save log.txt
cargo run | complete | get stdout | save log.txt
cargo run | complete | get stdout | save -f log.txt
cargo run | complete | get stderr | save -f log.txt
cargo run | complete
cargo run | complete | get stderr | save -f log.txt
cd quevy/
ls
cargo init --lib 
ls
mv loader.rs src/
mv mod.rs src/
ls src
clear
cd ..
ls
ls -la
nvim
y
clear
ping google.com
cd ..
ls
nvim Cargo.toml 
nivm 
cargo run
ls
mv assets game/assets
cargo run
carog check
cargo check
tmux a
cd ~/gits
git clone https://www.github.com/bevyengine/bevy
cd bevy/
ls
nvim
cargo run
tmux a
cd ~
l
nvim
cd ~/gits/bevy
nvim
cargo run
cargo check
cargo run
cargo add bevy --feature bevy_remote
cargo add bevy --features bevy_remote
cd game
cargo add bevy --features bevy_remote
cargo run
tmux-sessionizer 
nvim
tmux-attach
nvim
tmux a
cargo run
cargo check
cargo run
cargo add bevy_flycam
cargo run
cd ~/projects/
mkdir bevy-game
cd bevy-game/
cargo new
cargo init
nvim
cargo add bevy
carg add avian3d
cargo add avian3d
cargo add qevy
cargo add --git https://github.com/BrianWiz/qevyERR
cargo add --git https://github.com/BrianWiz/qevy
cargo add qevy --git https://github.com/BrianWiz/qevy
cargo add qevy --git https://github.com/BrianWiz/qevy --features avian3d
cargo add qevy --git https://github.com/BrianWiz/qevy --no-default-features --features avian
cargo add avian3d
cargo doc 
cargo add leafwing_input_manager
cargo build
cargo biuld
cargo build
cargo add --dev bevy_flycam
cargo install https://github.com/BrianWiz/qevy
cargo install taplo-cli --locked
taplo 
taplo config
taplo config schema
touch .taplo.toml
nvim .taplo.toml 
taplo config schema
taplo config
taplo config schema
taplo 
taplo config
ls
ls -la
help
taplo help
taplo lint Cargo.toml
nvim
taplo lint Cargo.toml
tmux-sessionizer 
cargo run
nvim
nvim
tmux-sessionizer 
nvim
cargo install taplo-cli --locked --features 
cargo search taplo-cli
cargo install cargo-feature --locked
cargo feature taplo-cli
cargo uninstall cargo-feature 
cargo install taplo-cli --locked --features lsp toml-test
cargo install taplo-cli --locked --features lsp
cargo chekc
cargo check
fw
cargo run
cargo check
mkdir .cargo
touch .cargo/config.toml
nvim
nivm
nvim
cargo build
cargo install --locked trunk
trunk
cargo rd
cargo ad bevy-inspector-egui
cargo add bevy-inspector-egui
tmux-sessionizer 
nivm
nvim
tmux-sessionizer 
tmux-attach
nvim
tmux-sessionizer 
nvim
tmux-sessionizer 
nvim
tmux-sessionizer 
nvim
cargo run
cargo rd
fw
cargo run
cargo rd
cargo rnu
cargo rd
cargo run
cargo rd
cargo run
cargo rd
cargo run
cargo rd
cargo run
cargo rd
cargo run
cargo rd
cargo run
cargo rd
ls
ls assets/
yazi
cargo checmk
cargo check
cargo run
crago rd
cargo rd
y
cargo rd
cargo run
cargo rd
cargo rd
brew install beet
brew install python3
cargo rd
cargo run
bevy rd
cd ..
trunk
trunk serve
trunk tools
trunk --help
trunk tools --help
trunk serve
trunk serve --release
trunk build
trunk build --features dev
trunk build --features dev --cfg=web_sys_unstable_apis
trunk build --features dev -- --cfg=web_sys_unstable_apis
trunk build --features dev --cfg web_sys_unstable_apis
cargo add bevy_egui
cargo add bevy_egui --features -manage_clipboard
trunk serve --release
trunk serve --features dev
cargo install cargo-feature --locked
cargo feature bevy_egui_inspector
cargo feature bevy-egui-inspector
cargo feature bevy-inspector-egui
tmux-attach
cd ~
man fstap
man fstab
diskutil list
clear
diskutil
diskutil list | detect columns 
diskutil list
df
man df
df -h
diskutil info disk3s8
vifs
man fstab
sudo vifs
umount --all 
umount --all
umount --all 
umount -a
mount -a
mkdir ~/SECRETS
mount -a
ls
clear
mount -a
cd SECRETS/
pwd
mount -a
umount -a
mount -a
lsblk
brew install lsblk
lsblk
mount disk3s8
mount 
umount /dev/disk3s8
sudo umount /dev/disk3s8
mount
mount -a
mount
clear
ls
lsblk
diskutil list
mount ID=disk3s8 /Users/biggerben/SECRETS/
mount ID=disk3s8 -tapfs /Users/biggerben/SECRETS/
mount_apfs disk3s8 /Users/biggerben/SECRETS/
ls
mount
umount /dev/disk3s8
cd ..
umount /dev/disk3s8
diskutil unmount 
diskutil unmount  disk3s8
mount_apfs disk3s8 /Users/biggerben/SECRETS
ls
diskutil unmount  disk3s8
sudo vifs
mount 9B9B330B-90BF-469E-9B6D-8FEC2501B51E /Users/biggerben/SECRETS/
mount_apfs 9B9B330B-90BF-469E-9B6D-8FEC2501B51E /Users/biggerben/SECRETS/
mount_apfs UUID=9B9B330B-90BF-469E-9B6D-8FEC2501B51E /Users/biggerben/SECRETS/
diskutil list
diskutil info disk3s8
mount_apfs UUID=9B9B330B-90BF-469E-9B6D-8FEC2501B51E /Users/biggerben/SECRETS/
sudo vifs
mount -a
clear
curl -sSL https://codeberg.org/PassFF/passff-host/releases/download/latest/install_host_app.sh | bash -s -- firefox
cd ~/.config/
ls
ls -la
cd ..
ls
cd .password-store/
ls
cd /Volumes/NOTES
cd ~
ls
cd projects
mkdir note_app
cd note_app/
cargo init
cargo add eframe
cargo add egui
nvim
cd ~/notes/physik_wellen/
nvim main.typ 
tmux-sessionizer 
tmux-sessionizer
mkdir notes/english-gfs
touch main.typ
cd main.typ
tmux-attach
nvim main.typ 
nivm
cd ..
ls
mv english-gfs/ ~/notes/english-gfs
cd ~/notes/english-gfs/
ls
tmux-sessionizer
cd ~/SECRETS/
touch github-recovery-codes
nvim github-recovery-codes 
passff
curl -sSL https://codeberg.org/PassFF/passff-host/releases/download/latest/install_host_app.sh | bash -s -- firefox
tmux-sessionizer
nvim
rm -r *
cargo init --lib --name note_app
nvim
cargo new lib
ls
cargo new bin
cd bin
nvim
rm bin
rm -r lib
ls
cd ..
ls
rm -r lib
carog new lib --lib
cargo new lib --lib
nvim
cd lib
cd /Volumes/NOTES/Vault13/
ls
cd .obsidian/
ls
nvim
ls -la
cd ..
ls -la
tmux-sessionizer 
nvim
tmux-attach
tmux-sessionizer .
nvim
nvim
tmux-attach
man mount_smbfs 
mount_smbfs ben:BenJulius@192.168.1.10/BenShare ~/mnt
mount_smbfs //ben:BenJulius@192.168.1.10/BenShare ~/mnt
cd ~/mnt
ls
cd ..
clear
diskutil list
mont
mount
umount //ben@192.168.1.10/BenShare
diskutil unmount //ben@192.168.1.10/BenShare
cd ..
diskutil unmount //ben@192.168.1.10/BenShare
mount_smbfs //ben:BenJulius@192.168.1.10/BenShare ~/mnt
cd ~/mnt
ls
cd Pictures/
ls
cd ..
sudo umount //ben@192.168.1.10/BenShare
umount -l //ben@192.168.1.10/BenShare
umount -f //ben@192.168.1.10/BenShare
sudo vifs
mount -a
sudo vifs
mount -a
mount //ben:BenJulius@192.168.1.10/BenShare/Pictures /Users/biggerben/Pictures/
sudo
l
sudo vifs
mount -a
sudo mount -a
umount -a
sudo mount -a
mount -a
mount_nfs //ben:BenJulius@192.168.1.10/BenShare ~/mnt
mount -t nfs //192.168.1.10/BenShare 
mount -tnfs //192.168.1.10/BenShare 
mount -tnfs //ben:BenJulius@192.168.1.10/BenShare 
mount -tnfs 192.168.1.10/BenShare 
mount -tnfs 192.168.1.10/BenShare ~/mnt
mount -tnfs //192.168.1.10/BenShare ~/mnt
man mount
man mount_point
mount -tnfs //192.168.1.10/BenShare ~/mnt /
mount_nfs //ben:BenJulius@192.168.1.10/BenShare ~/mnt
mount-a
mount -a
man mount_nfs
man mount_smbfs
mount -a
clear
mount -a
mount
clear
mount -a
man vifs
man fstab
mount -a
umount -a
sudo vifs
mount -a
ls ~/Pictures/
cd projects
cargo new huffman
cd huffman/
rm -r *
cargo init --lib
nvim
cargo check
cargo add serde
cargo add serde --features serde_derive
cargo check
clear
cargo build
cargo check
cargog check
cargo check
clear
cargo check
tmux-sessionizer
clear
nvim leetcode
nvim Leet
tmux
nvim
nvim main.typ 
nvim
nvim
nvim index.html
nvim main.typ 
killall tmux
tmux-se
l
tmux-sessionizer 
clear
nvim
ls -la
git status
cargo install gitui
cargo install gitui --locked
nvim
nvim leetcode.nvim
cd ~/zmk-config/
ls
nvim
git status
git add config/cradio.conf 
git commit -m "disable usb-keyboard"
git push 
brew install imagemagick
nvim leet
curl -sSf https://install.surrealdb.com | sh
surreal start
surreal start --user root --pass root
tmux-sessionizer
cd ~/projects
mkdir surrealdb_book
surreal start --user root --pass root surrealkv:surrealbook.db
clear
tmux-sessionizer
fd 
fd --color never
fd --color=never
fd --color=never --type=file --hidden --follow --exclude {.git, .obsidian}
fd --color=never --type=file --hidden --follow --exclude=.git,.obsidian
man fd
fd
fd --help
fd --help | less
fd --help
fd --color=never --type=file --hidden --follow --exclude= .git .obsidian
fd --color=never --type=file --hidden --follow --exclude .git .obsidian
fd --color=never --type=file --hidden --follow --exclude .git
fd --color=never --type=file --hidden --follow --exclude .git --exclude .obsidian
:q
nvim
surreal start --user root --pass root surrealkv:surrealbook.db
surreal start surrealkv:surrealbook.db
tmux-sessionizer
nvim
tmux-sessionizer 
nvim
nvim
nivm
nvim
ghostty +list-themes
nvim
gitui
giui
gitui
brew install lazygi
brew install lazygit
nvim
clear
ls -la
touch .gitignore
nvim .gitignore 
nvim
figlet
brew install figlet
tmux-sessionizer
figlet 
figlet --help
figlet -h
man figlet
figlet -f isometric1 NEOVIM
figlet -f isometric1 NVIM
figlet -f isometric2 NVIM
figlet -f smkeyboard NVIM
figlet -f smkeyboard HJKL
figlet -f smkeyboard HJKL | pbcopy
nvim
figlet -f smkeyboard HJKL | pbcopy
nvim
nvim
nivm
nvim
brew install Aewan
nvim
nvi
nvim
printf 
help printf
man printf
tmux-sessionizer
nvim
tmux a
printf "\x1b[1;31mT"
printf
man prinf
man printf
printf "%s" "\x1b[1;31mT"
printf --help
printf "%s" "\0x1b[1;31mT"
tmux-sessionizer
nvim
help prinf
help printf
printf "\x1b"
man prinf
man printf
nvim
printf "%s" \0x
printf "%s" \0x1b
cat 
echo "\x1b"
nvim
PROF = 1; neovim
$env.PROF = 1; neovim
$env.PROF = 1; nvim
nvim
$env.PROF = 0
nvim
killall nvim
nvim
nvim
nvim
brew install lazygit
brew reinstall lazygit
nvim
touch -c ~/.config/lazygit/config.yml
nvim ~/.config/lazygit/
nvim
git push
lazygit
nvim
tmux a
nvim
nivm
nvim
nivm
nvvim
nvim
cargo install --locked --git https://github.com/Feel-ix-343/markdown-oxide.git markdown-oxide
nvim
brew install zk
zk
nvim
nivm
nvim
tmux a
cd ~/Desktop
ls
mkdir zk_test
cd zk_test/
nvim
zk --help
zk init
ls
ls -la
zk new
zk
zk list
zk new
zk graph
zk graph --format=
zk graph --format="json"
zk
nvim
tmux a
nvim
cd /Volumes/NOTES/
mkdir zk
cd zk
zk init
nvim
zk new test-id
zk
zk new
zk new -h
zk new -t testing-note
nvim
tmux a
zk new -t image-test
magick_cli
magick_rock
tmux a
nvim
nvim
nvi
nvim
tmux a
nvim
curl https://github.com/3rd/image.nvim/blob/master/minimal-setup.lua
curl https://raw.githubusercontent.com/3rd/image.nvim/refs/heads/master/minimal-setup.lua -o test.lua
ls
nvim --clean -c ":luafile test.lua"
nvim
tmux a
nvim
cd /Volumes/NOTES/zk/
nvim
tmux a
nvim
mkdir -p assets/images
mkdir assets/images
nvim
open .zk/notebook.db
q
nvim
rm -r test.lua
y
zk
zk index
nvim
zk list
zk list -h
zk list --orphan
rk 202501082258-deqd.md
rm 202501082258-deqd.md
nvim
help ls
ls | where name !~ 202501061537-election-event-timeline.md
ls | where name !~ 202501061537-election-event-timeline.md | where type = file
ls | where name !~ 202501061537-election-event-timeline.md | where type = "file"
ls | where name !~ "202501061537-election-event-timeline.md" | where type = "file"
ls | where name !~ "202501061537-election-event-timeline.md" | where type == "file"
ls | where name !~ "202501061537-election-event-timeline.md" | where type == "file" | get name
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>files
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>$files
help each
find
help find
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_renamed = $files | each { |e| e | find -r '\d{10}' }
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_renamed = $files | each { |e| e | find -r '\d{10}' }<\n><\n>$file_renamed
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_renamed = $files | each { |e| $e | find -r '\d{10}' }<\n><\n>$file_renamed
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_renamed = $files | each { |e| $e | find -r '\d{10}' | echo }<\n><\n>$file_renamed
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_renamed = $files | each { |e| $e | find -r '\d{10}' | echo }
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_renamed = $files | find -r '\d{10}' | echo
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_renamed = $files | find -r '\d{10}' | echo<\n>$file_renamed
ls
ls | nvim
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_renamed = $files | find --regex '\d{10}' | echo<\n>$file_renamed
nvim
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_renamed = $files | find --regex '\d{10}' <\n>$file_renamed
help str
help str replace
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_renamed = $files | str replace --regex '(\d{10})(.+)' '$2'<\n>$file_renamed
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_new_dates = $files | str replace --regex '(\d{10})(.+)' '$1' | into datetime<\n>$file_new_dates
into datetime --list 
nvim
into datetime --list 
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_new_dates = $files | str replace --regex '(\d{10})(.+)' '$1' | into datetime -f "%s"<\n>$file_new_dates
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_new_dates = $files | str replace --regex '(\d{10})(.+)' '$1' | into datetime -f "%s" | date to-record <\n>$file_new_dates
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_new_dates = $files | str replace --regex '(\d{10})(.+)' '$1' | into datetime -f "%s" | format date "%Y%m%d%H%M"<\n>$file_new_dates
nvim
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_new_dates = $files | str replace --regex '(\d{10})(.+)' '$1' | into datetime -f "%s" | format date "%Y%m%d%H%M"<\n><\n>$files | str replace --regex '(\d{10})(.+)' '$2'
vim
help enumerate
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_new_dates = $files | str replace --regex '(\d{10})(.+)' '$1' | into datetime -f "%s" | format date "%Y%m%d%H%M"<\n><\n>$files | str replace --regex '(\d{10})(.+)' '$2' | enumerate
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_new_dates = $files | str replace --regex '(\d{10})(.+)' '$1' | into datetime -f "%s" | format date "%Y%m%d%H%M"<\n><\n>$files | str replace --regex '(\d{10})(.+)' '$2' | enumerate | get index
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_new_dates = $files | str replace --regex '(\d{10})(.+)' '$1' | into datetime -f "%s" | format date "%Y%m%d%H%M"<\n><\n>$files | str replace --regex '(\d{10})(.+)' '$2' | enumerate | each { |e| $e | &file_new_dates.$in.index }
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_new_dates = $files | str replace --regex '(\d{10})(.+)' '$1' | into datetime -f "%s" | format date "%Y%m%d%H%M"<\n><\n>$files | str replace --regex '(\d{10})(.+)' '$2' | enumerate | each { |e| $e | $file_new_dates.$in.index }
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_new_dates = $files | str replace --regex '(\d{10})(.+)' '$1' | into datetime -f "%s" | format date "%Y%m%d%H%M"<\n><\n>$files | str replace --regex '(\d{10})(.+)' '$2' | enumerate | each { |e| $file_new_dates | get $e.index }
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_new_dates = $files | str replace --regex '(\d{10})(.+)' '$1' | into datetime -f "%s" | format date "%Y%m%d%H%M"<\n><\n>$files | str replace --regex '(\d{10})(.+)' '$2' | enumerate | each { |e| $file_new_dates | get $e.index | into string | $in}
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_new_dates = $files | str replace --regex '(\d{10})(.+)' '$1' | into datetime -f "%s" | format date "%Y%m%d%H%M"<\n><\n>$files | str replace --regex '(\d{10})(.+)' '$2' | enumerate | each { |e| $file_new_dates | get $e.index | into string | $in + $e}
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_new_dates = $files | str replace --regex '(\d{10})(.+)' '$1' | into datetime -f "%s" | format date "%Y%m%d%H%M"<\n><\n>$files | str replace --regex '(\d{10})(.+)' '$2' | enumerate | each { |e| $file_new_dates | get $e.index | into string | $in + $e.item }
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_new_dates = $files | str replace --regex '(\d{10})(.+)' '$1' | into datetime -f "%s" | format date "%Y%m%d%H%M"<\n><\n>$files | str replace --regex '(\d{10})(.+)' '$2' | enumerate | each { |e| $file_new_dates | get $e.index | into string | $in + $e.item } | enumerate | each { |f| $files | get $f.index }
let files = ls |<\n>where name !~ "202501061537-election-event-timeline.md" |<\n>where type == "file" |<\n>get name<\n><\n>let file_new_dates = $files | str replace --regex '(\d{10})(.+)' '$1' | into datetime -f "%s" | format date "%Y%m%d%H%M"<\n><\n>$files | str replace --regex '(\d{10})(.+)' '$2' | enumerate | each { |e| $file_new_dates | get $e.index | into string | $in + $e.item } | enumerate | each { |f| $files | get $f.index | mv $in $f.item }
ls
nvim
zk list --query -h
zk list 
zk list --help
zk list --match -h
zk list --match
zk list -m
zk list -h match
nvim
zk list
zk
zk graph 
zk graph --format="json"
nvim
brew install glow
glow
glow --help
glow 202412272345-obsidiannvim.md
nvim
fzf
zk
zk list --interactive
nvim
zk list --interactive
glow -h 
glow --config 
glow 202412280752-english-gfs.md
glow 202501061537-election-event-timeline.md
cargo install md-tui --locked
md-tui
mdt
mdt --help
mdt -h
mdt
nvim
zk ls
glow
nvim
zk ls
cd /Volumes/NOTES/zk/
ls
zk ls
nvim
zk ls
zk ls --related 202412280752-english-gfs.md
nvim 
zk ls --related 202412280752-english-gfs.md
nvim
nvim
tmux a
nvim
zk ls
ls
zk ls
rm 202501090053-ld2b.md
nvim
ls
zk index
zk graph --format="json" | from json
zk graph --format="json" | from json | explore
zk 
zk edit 
http get https://github.com/BiggerBen13/nvim-config
http get https://github.com/BiggerBen13/nvim-config | strip 
strip
brew install icalBuddy
brew install ical-buddy
icalBuddy 
icalBuddy -b "*" -nc eventsToday
icalBuddy -b "*" -nc
icalBuddy -b "*" -nc calendars
task
brew install task-warrior
brew install task
task
taskversion
task version
ls ~/.taskrc
bat ~/.taskrc 
nvim ~/.taskrc
mv ~/.taskrc ~/.config/task/taskrc
mkdir ~/.config/task
mv ~/.taskrc ~/.config/task/taskrc
task
task news
task add look for Trumps annexation announcement
task add look for several musk statement
task list
task
task start 1
zk new -t trump-expanding-northwards
nvim
nvim
pass twitter.com 
pass twitter.com
pass -c twitter.com
y
y
nvim
y
clear
brew install fastfetch
clear; fastfetch
cd ..
cd zk
zk tags
zk tag
nvim
tmux-sessionizer
cargo add surreal
nvim
nivm
cargo add tokio --features all
cargo add tokio --features full
nvim
tmux a
zk new -t "analysis"
zk list
zk list --format {{title}}
zk list --format {{word-count}} {{title}}
zk list --format "{{word-count}} {{title}}"
zk --help
zk list --help
zk list --orphan --format "{{title}} {{creation-date}}"
zk list --orphan --format "{{title}} {{creation-date}}" --tags
zk list --orphan --format "{{title}} {{created}}" 
clear
zk list --orphan --format "{{title}} {{date-format created "%y-%m-%d}}" 
zk list --orphan --format "{{title}} {{date-format created "%y-%m-%d"}}" 
zk list --orphan --format "{{title}} {{date-format created '%y-%m-%d'}}" 
zk list --orphan --format "{{title}} {{date-format (created) '%y-%m-%d'}}" 
zk list --orphan --format "{{title}} {{date-format (created) short}}" 
zk list --orphan --format "{{title}} {{date-format (date created) short}}" 
zk list --orphan --format "{{title}} {{date created}}" 
zk list --orphan --format "{{title}} {{format-date created}}" 
zk list --orphan --format "{{title}}\t{{format-date created}}" 
zk list --orphan --format "{{title}} \t{{format-date created}}" 
zk list --orphan --format "{{title}/t\t{{format-date created}}" 
zk list --orphan --format "{{title}\t\t{{format-date created}}" 
zk list --orphan --format "{{title}\t{{format-date created}}" 
zk list --orphan --format "{{title}}\t\t{{format-date created}}" 
zk list --orphan --format "{{format-date created}}\t{{title}}"
zk list --orphan --format "{{format-date created}}\t{{word-count}}\t{{title}}"
zk list --orphan --format "{{format-date created}}\t{{word-count}}\t{{title}}" --sort word-count
zk list --help
sort
zk list --orphan --format "{{format-date created}}\t{{word-count}}\t{{title}}" --sort word-count-
zk
zk list --orphan --format "{{word-count}}\t{{title}}" --sort word-count-
zk list --orphan --format "{{word-count}}\t{{title}}|{{file-name}}" --sort word-count-
zk list --orphan --format "{{word-count}}\t{{title}}|{{filename}}" --sort word-count-
zk list --orphan --format "{{word-count}}\t{{title}} | {{filename}}" --sort word-count-
rm 202501091250-32st.md
ls
nvim
ls
ls -la
nvim
brew install utm
cd ~/notes/english-gfs/handout
cd ~/notes/
mkdir handout
ls
ls -la
ls -lad
nvim
cd ~/
ls
cd bin
$env.PATH
nvim
nvim .bashrc 
ls | where type == file
ls -l | where type == file
ls -la | where type == file
ls -a | where type == file
nvim .bashrc 
mkdir home-bin
cd home-bin
git clone https://github.com/ziglang/zig
cd zig/
ls
mkdir build<\n>cd build<\n>cmake ..<\n>make install
brew install llvm lld<\n>mkdir build<\n>cd build<\n>cmake .. -DZIG_STATIC_LLVM=ON -DZIG_STATIC_ZSTD=ON -DCMAKE_PREFIX_PATH="$(brew --prefix llvm@19);$(brew --prefix lld);$(brew --prefix zstd)"<\n>make install
echo 'export PATH="/opt/homebrew/opt/llvm/bin:$PATH"' >> ~/.bashrc
^echo 'export PATH="/opt/homebrew/opt/llvm/bin:$PATH"' >> ~/.bashrc
bash "echo 'export PATH="/opt/homebrew/opt/llvm/bin:$PATH"' >> ~/.bashrc"
cd home-bin
cd zig
brew install llvm lld<\n>mkdir build<\n>cd build<\n>cmake .. -DZIG_STATIC_LLVM=ON -DZIG_STATIC_ZSTD=ON -DCMAKE_PREFIX_PATH="$(brew --prefix llvm@19);$(brew --prefix lld);$(brew --prefix zstd)"<\n>make install
brew install llvm-config
cmake .. -DZIG_STATIC_LLVM=ON -DZIG_STATIC_ZSTD=ON -DCMAKE_PREFIX_PATH="$(brew --prefix llvm@19);$(brew --prefix lld);$(brew --prefix zstd)"
brew install cmake
cmake .. -DZIG_STATIC_LLVM=ON -DZIG_STATIC_ZSTD=ON -DCMAKE_PREFIX_PATH="$(brew --prefix llvm@19);$(brew --prefix lld);$(brew --prefix zstd)"
brew install llvm
fd ~/opt llvm-config
fd llvm-config ~/opt
fd llvm-config /opt
llvm
ls /usr/local/opt/
brew install llvm
nvim ~/.bash_history 
nvim ~/.bashrc
cd /opt/homebrew/opt/llvm/bin/
ls
pwd | pbcopy
pbpaste
nvim ~/.bashrc
$env.PATH
cd ~/.zshrc
nvim ~/.zshrc
nvim ~/.zshenv 
ls ~/.config
ls -la ~/.config
cd ~/.config
ls -la
ls -a
cd ..
cp -f ~/.bashrc ~/.zshrc
$env.PATH
bash
nvim ~/.config/alacritty/
nvim ~/.bash_profile
fd .bash_profile /
nvim .profile
nvim .bashrc
cd ~/home-bin/
cd zig
brew install llvm lld<\n>mkdir build<\n>cd build<\n>cmake .. -DZIG_STATIC_LLVM=ON -DZIG_STATIC_ZSTD=ON -DCMAKE_PREFIX_PATH="$(brew --prefix llvm@19);$(brew --prefix lld);$(brew --prefix zstd)"<\n>make install
make install
brew --prefix llvm
brew --prefix llvm@19
cd brew --prefix llvm@19
cd (brew --prefix llvm@1)
cd (brew --prefix llvm@19)
ls
bash
cd ~/home-bin/zig/build
ls
./zig2
./zig2 --help
./zig1
ls stage3/bin/
ln stage3/bin/zig ~/home-bin/zig
ls ~/home-bin
ln
ln -h
ln --help
man ln
ln -s ./stage3/zig ../../zig
ls ~/home-bin
mv ~/home-bin/zig ~/home-bin/zig-src
cd ~/home-bin
cd zig-src/build/
ln -s ./stage3/zig ../../zig
zig
cd ..
ls
./zig
ls
ls -l
rm zig
ln ~/home-bin/zig-src/build/stage3/bin/zig zig
ls
./zig
ls
git clone https://github.com/zigtools/zls.git zls-src
cd zls-src
zig build -Doptimize=ReleaseSafe
ls
ln -s ~/home-bin/zig-src/build/stage3/lib ../lib
cd ..
ls
cd zls
cd zls-src/
zig build -Doptimize=ReleaseSafe
ls
ls zig-out/
ls zig-out/bin
ln -s zig-out/bin/zls ~/home-bin/zls
zls
ls ..
ln -s ~/home-bin/zls-src/zig-out/bin/zls ~/home-bin/zls
rm ../zls
ln -s ~/home-bin/zls-src/zig-out/bin/zls ~/home-bin/zls
zls
cd ..
ls
cd ~/projects
mkdir zig-test
cd zig-test
zig init --bin
zig init
nvim
cd ..
ls
cd ~/home-binzls
cd ~/home-bin
ls
cd zig-src
ls
cd lib/std/
ls
nvim
cd ..
ls
cd ..
chmod +x ./zls
chmod +x ./zig
cd zig-src/lib/std/
nvim
zls
zls --help
nvim
cd ..
ls
cd ..
rm ./zls
cp ./zls-src/zig-out/bin/zls ./zls
ls
nvim
ls
ls -la
zls
nvim
zig run
zig --help
zig run --bin
zig run
zig run --Doptimize=ReleaseFast
zig 
man zig
cd ~
tmux-sessionizer
zig 
tmux a
zig run
bash
zig run src/main.zig
nvim
zls
chmod +x ~/home-bin/zls
nvim
nvim ~/.bashrc 
ls ~/
cd ~
curl -LO "https://raw.githubusercontent.com/ziglang/shell-completions/master/_zig.bash"<\n>echo ". $PWD/_zig.bash" >> ~/.bashrc
tmux-sessionizer
nvim ~/.zshrc
tmux a
nvi,
nvim
brew remove zig
nvim
which zls
$env.PATH | each {|e| { ls $e | where name == "zls" }}
$env.PATH | each {|e| ls $e | where name == "zls" }
$env.PATH | path expand | each {|e| ls $e | where name == "zls" }
$env.PATH | path expand | each {|e| ls $e | where name == "zls" | err> /dev/null }
$env.PATH | path expand | each {|e| ls $e err> /dev/null | where name == "zls" }
which zls
nvim
zig run
zig 
zig run
tmux-sessionizer 
nvq
n
zig run
zig run bin
zig run
nvim
zig run main
clear
nvim
zig help
zig targets
clear
zig help
zig build --help
zig build run
nvim
rm -r *
zig init 
nvim
zig build run
nvim
ls
touch .gitignore
nvim
nvim 
nvim
nvim ~/.config/nushell/env.nu 
nvim
tmux-sessionizer 
zls env
zls
nvim ~/.profile 
zls
ls ~/home-bin
zls
$env.PATH
nvim ~/.bashrc 
zls
zig
nvim
zig 
$env.PATH
zls
zls env
tmux-sessionizer 
nvim
tmux-sessionizer 
zls
nvim
nvim ~/.zshrc
$env.PATH
nvim ~/.zshenv 
ls
cd ..
ls
nvim .bashrc 
nvim
zig run
$env.PATH
nvim ~/.config/tmux/tmux.conf 
tmux source
tmux source ~/.config/tmux/tmux.conf
nvim ~/.config/tmux/tmux.conf 
tmux source ~/.config/tmux/tmux.conf
zig
tmux source ~/.config/tmux/tmux.conf
$env.PATH
zig
$env.PATH
zig
zls
$env.PATH
zig
~/home-bin/zig
zig
zig
which zlg
which zig
zig
nushell
$env.PATH
nvim ~/.profile 
zig
zig run
zig build run
zig run
zig build run
cargo run
zig build run
nvim
nvim test.md
cargo install meow-cli --locked
clear
:
tmux-sessionizer 
clear
meow
cargo install meow-cli --locked
clear
cd ~/
ls
cd ~/nix
nvim
cloc .
nvim
cd ..
cd ~/nvim
ls
cd ~/.config/nvim
nvim
cloc .
nvim
echo "\n"
tmux-sessionizer 
nvim
du Downloads
clear
ls Downloads | where name == *.iso
ls
cd ~/projects
mkdir advent_of_code
cd advent_of_code/
mkdir day01
cd day01/
zig init 
nvim
http get https://adventofcode.com/2024/day/1/input | save input
http get https://adventofcode.com/2024/day/1/input
curl https://adventofcode.com/2024/day/1/input
nvim input.txt
zig build run
nvim
zig build run
clear
zig build run --release fast
zig build run -Doptimize=ReleaseFast
zig build run
time zig-out/bin/day01
pass accounts.google.com/ben@kirschniak.de -c
ls
clear
nvim
cd ..
ls
mkdir daclear
clear
ls
rm daclear
nvim
tmux a
nvim
nvim
tmux a
nvim
nvkm
brew install nethack
nethack
nvim
ls
rm bd
ls
mkdir day02
cd day02
cargo init
ls
cd ~/.config/ghostty/
nvimk
cd ~/.config/ghostty/
nvim
ls
clear
ls
nvim
du test.txt
du
ls
brew install kak
bre winstall kakoune
brew install kakoune
kak
cd ~/.config
ls
kak
cd day02
kak
brew install kakoune-lsp/kakoune-lsp/kakoune-lsp
cd ~/.config
ls
cd kak
mkdir kak
cd kak
touch kakrc
kak kakrc
kak
cd ~/projects/advent_of_code/day02
kak
ghostty +list-themes
kak
ghostty +list-themes
tmux-sessionizer 
ls
cd kak
cd ..
kak
cd ..
cd .config/kak
ls
mkdir ayu.kak
kak ayu.kak/
rm ayu.kak/
touch ayu.kak
kak ayu.kak 
y
kak ayu.kak 
cd ..
kak kakrc
ghostty +list-themesk
kak
tmux a
nvim kakrc 
kak kakrc
kak
brew install hx
brew install helix
cargo install helix-cli --locked
cargo install --git https://github.com/helix-editor/helix --locked
cargo install --git https://github.com/helix-editor/helix --bin helix-term --locked
cargo install --git https://github.com/helix-editor/helix helix-term --locked
hx
cargo uninstall hx
cargo uninstall helix-term
brew install helix
hx
nvim
cd day02
cargo run
dbg
debug
cargo run
tmux-sessionizer 
ls
tmux a
cd ..
cd zk
ls
cd .zk/
ls
open notebook.db
open notebook.db | nvim
open notebook.db | explore
sql
sqlite
sqllite
query
query db
query db notebook.db
query notebook.db
open notebook.db | query db 
cargo add sqlx --features runtime-tokio
cargo add sqlx-lite
cargo add sqlx-sqlite
cargo add sqlx --features _sqllite
cargo add sqlx --features _sqlite
cargo add sqlx --features macros
cargo add anyhow
cargo sqlx
cargo install sqlx
cargo install sqlx-cli --locked
sqlx
sqlx database 
bash -c export DATABASE_URL="sqlite:notes.db"
$env.DATABASE_URL="sqlite:notes.db"
$env.DATABASE_URL = "sqlite:notes.db"
sqlx db create
ls
sqlx migrate run
nvim
$env.DATABASE_URL = "sqlite:notes.db"
nvim
mkdir migrations
cd migrations/
cd ..
rm migrations/
sqlx migrate add
sqlx migrate add notes
nvim
sqlx migrate run
ls
open notes.db
kak
clear
cargo add sqlx --features sqlite
nvim
kak
nvim
hx
cd ~/.config
cd nvim
nvim
ghostty +list-themesk
nvim ~/.config/ghostty/config
nvim
helix
hx
ghostty +list-themes
format
format pattern
format pattern --help 
^format
kak
nvim
cd ..
cd ~/Documents
nvim
cd blogs/
nvim
kak -c 31000
tmux-attach 
kak
nvim
nvim ~/.config/ghostty/config
nvim
tmux a
nvim
cloc .
nvim
git log
git status
git add after/syntax luas/user/plugins
git add after/syntax lua/user/plugins/*
git status
git rm lua/user/plugins/leetcode.lua
git rm lua/user/plugins/render-markdown.lua.disabled 
git rm lua/user/plugins/render-markdown.lua
git diff
git commit -m "configure trouble.nvim, integrate zk-lsp"
git push
$env.DATABASE_URL = "sqlite:notes.db"
bash
cargo run
tmux-sessionizer 
ls
nvim
git diff
git log
git status
git add build.yaml config/cradio.conf
git push
git branch
brew install cmake ninja gperf python3 ccache qemu dtc wget libmagic
python3 -m venv ~/zephyrproject/.venv
source ~/zephyrproject/.venv/bin/activate
pip3 install -U west
source ~/zephyrproject/.venv/bin/activate
cd ~/zmk-config/
ls
git push origin
git origin
git remote
git push origin
brew tap FelixKratz/formulae<\n>brew install sketchybar
bash -c "mkdir -p ~/.config/sketchybar/plugins<\n>cp $(brew --prefix)/share/sketchybar/examples/sketchybarrc ~/.config/sketchybar/sketchybarrc<\n>cp -r $(brew --prefix)/share/sketchybar/examples/plugins/ ~/.config/sketchybar/plugins/"
cd ~/.config/sketchybar/
ls
brew services start sketchybar
nvim
brew install aerospace
<\n><\n>brew install --cask nikitabobko/tap/aerospace<\n><\n>
aerospace
mkdir ~/.config/aerospace
mv ~/.aerospace.toml ~/.config/aerospace/aerospace.toml
nvim
cd ~/.config/aerospace/
brew tap FelixKratz/formulae<\n>brew install borders
brew services stop sketchybar
borders
kilall borders
killall borders
borders active_color=0xffe1e3e4 inactive_color=0x00000000 width=5.0
killall borders
killall sketchybar 
killall borders
borders active_color=0xffe1e3e4 inactive_color=0x00000000 width=5.0
osascript -e 'id of app "Discord"'
aerospace
aerospace move-node-to-workspace messages
aerospace list-apps
aerospace move-node-to-workspace browsers
aerospace list-apps
:w
<\n><\n>defaults write -g NSAutomaticWindowAnimationsEnabled -bool false<\n><\n>
cd ..
mkdir borders
cd borders
touch bordersrc
/Users/biggerben/Library/Application Support/Vencord
cd "/Users/biggerben/Library/Application Support/Vencord"
ls
cd themes
touch kanagawa.css
nvim kanagawa.css 
http get https://raw.githubusercontent.com/ardishco-the-great/KanagawaGTK-for-discord/main/theme.css
http get https://raw.githubusercontent.com/ardishco-the-great/KanagawaGTK-for-discord/main/theme.css | save kanagawa.css
http get https://raw.githubusercontent.com/ardishco-the-great/KanagawaGTK-for-discord/main/theme.css | save -f kanagawa.css
tmux
nvim
killall borders
borders
killall borders
ls
nvim bordersrc 
killall borders
killall sketchybar 
killall aerospace
nvim bordersrc 
killall aerospace
nvim bordersrc 
killall borders
cd ~/.config/borders/
./bordersrc
:w
cd ..
cd sketchybar/
cd ../sketchybar/
nivm
sketchybar 
sketchybar --help
sketchybar --hotreload true
sketchybar --hotload true
killall sketchybar 
nvim
nvim
tmux a
cd ..
ls
cd nushell/
tmux-sessionizer.sh
cd ~/.tools
./tmux-sessionizer.sh
nvim ~/.tools/tmux-sessionizer.sh 
brew install stow
man stow
~/dotfiles
cd ~/dotfiles/
ls
mr -r *
rm -r *
ls -la
rm -r .DS_Store
ls
ls -la
mv ~/.profile ./
ls
cp ~/.* ./
ls ~ | where type == file | each {|x| mv $x ~/dotfiles/$x}
ls ~ | where type == file | each {|x| mv $x.name ~/dotfiles/$x}
ls
cd ..
ls
ls -la
cd ..
ls ~ | where type == file | each {|x| cp $x.name ~/dotfiles}
ls
cd biggerben/dotfiles/
ls
ls ~ | where type == file | each {|x| cp $x.name ~/dotfiles}
ls
rm "$x"
ls
ls ~
ls ~ -la
fd .profile /Users/
fd ".profil"e /Users/
fd ".profile" /Users/
ls ~ -la
ls ~ -la | where name == .*
help where
ls ~ -la | where name == '.*'
ls ~ -la | where type = file
ls ~ -la | where type == file
help wheer
killall aerospace 
ls ~ -la | where type == file
help where
ls ~ -la | where type == file | where name == '\..+'
ls ~ -la | where type == file | nvim
ls ~ -la | where type == file | where name == '.+\.'
ls ~ -la | where type == file | where name == '\.+.'
ls ~ -la | where type == file | where name == '\.\+.'
ls ~ -l | where type == file | where name == '\.\+.'
ls ~ -a | where type == file
ls ~ -a | where type == file | get name
y
ls
ls -la
ls -a
ls -a | get name
ls -a | get name | each { |x| echo  $"~/($x)" }
ls -a | get name | each { |x| mv $"~/($x)" $"~/($x).bak" }
ls -a | get name | each { |x| mv $"/Users/biggerben/($x)" $"/Users/biggerben/($x).bak" }
ls -a | get name | each { |x| echo $"/Users/biggerben/($x)" ... $"/Users/biggerben/($x).bak" }
ls -a | get name | each { |x| echo $"/Users/biggerben/($x)" $"/Users/biggerben/($x).bak" }
cp .profile ~/.profile
ls -a | get name | each { |x| echo $"/Users/biggerben/($x)" $"/Users/biggerben/($x).bak" }
ls -a | get name | each { |x| mv $"/Users/biggerben/($x)" $"/Users/biggerben/($x).bak" }
ls ~ -a
ls ~ -a | where type == file
stow .
ls ~ -a
ls ~ -a | where type == symlink
rm ~/.manpath
git init
lazygit
mkdir .config
cp -r ~/.config/nvim .config/nvim
ls
git submodule 
git submodule add
git submodule add https://github.com/BiggerBen13/nvim-config .config/nvim
lazygit
nvim
cp ~/.*.bak ./
ls
ls -la
rm -r alacritty/ helix/ kitty/ nvim
ls
ls -la
mv .bashrc.bak .bashrc
mv .gitconfig.bak .gitconfig
mv .profile.bak .profile
mv .zshrc.bak .zshrc
ls -la
mv .zshenv.bak .zshenv
ls
rm -r .git
l
ls
ls -la
git init
lazygit
cd .config/nvim
ls
cd ..
git submodule add https://github.com/BiggerBen13/nvim-config .config/nvim
lazygit
git status
git branch
git branch --help
git branch
git branch --help
git checkout --orphan orphan_main
git status
git commit -m "initial commit"
lazygit
git push origin orphan_main
git branch list
git branch --list 
git branch -d list
gitui
lazygit
git branch -m orphan_main main
git branch -m origin/orphan_main main
git pull
gitui
lazygit
git push origin orphan_main
git push origin main
cp ~/.config/ghostty/ .config/ghostty
cp -r ~/.config/ghostty/ .config/ghostty
cp -r ~/.config/aerospace .config/aerospace
cp -r ~/.config/borders/ .config/borders
mv ~/.config/nvim ~/.config/nvim.bak
mv ~/.config/borders/ .config/borders.bak
mv ~/.config/borders/ ls ~/.config
ls
ls -a
ls .config
mv .config/borders.bak/ ~/.config
ls
mv .config/borders.bak/ ~/.config
ls .config
ls ~/.config
mv ~/.config/ghostty/ ~/.config/ghostty.bak
bash
