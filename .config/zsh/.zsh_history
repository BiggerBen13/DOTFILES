git add readme.md
touch readme
nvim readme
nvim readme
git add readme
git status
git commit -m "inital commit"
gh repo create wgpu-tut --private --source=.
brew upgrade gh
cargo run
cargo run
cargo run
cargo run
./target/debug/wgpu-tut
./target/debug/wgpu-tut
cargo run
cargo run
cargo run
git status
git add src/app.rs src/state.rs src/main.rs
git commit
git log
git status
ls
cargo run
cloc .
clear
cloc
ls
nvim
clear
git status
cargo build
cargo build
cargo build
cargo build
cargo build
cargo run
cargo run
lldb target/debug/main
rust-lldb
rust-lldb target/debug/main
cargo run
nvim
cargo run
rust-lldb target/debug/main
cargo run
cargo run
git status
git add src/
git commit -m
git commit
clear
cargo run
cloc
cloc .
clear
cargo build
cargo build
cargo build
nvim
cargo build
cargo build
cargo run
cargo run
cargo run
git status
git diff
clear
cloc .
clear
cargo run
git status
git add src/state/layer.rs
git rm src/layer.rs
git add src/bin/main.rs src/state/mod.rs src/state/state.rs src/state/state_config.rs
clear
nvim
git status
git commit -m
git commit
git status
git switch main
git switch master
git merge layers
clear
git push
git pull
git push --set-upstream origin master
git status
help random
man random
nvim ~/.config/tmux/tmux.conf
clear
nvim
nvim
ls
man
nvim
clear
nvim ~/projects/c3dgame/src/r_draw.c
cd ~/proj
proj
mkdir mkgame
cd mkgame
mkdir src
cd src
touch main.cpp
nvim main.cpp
rm -r main.cpp
ls
ls
pwd
cd ..
touch src/main.c
nvim Mak
nvim Makefile
make
nvim Makefile
make
ls
nvim Makefile
make
nvim Makefile
make dir
make dirs
nvim Makefile
ls
mv :q Makefile
make dirs
nvim Makefile
make dirs
ls build/obj
ls
ls
make 
cd ..
nvim cnet
ls
nvim modern-c/Makefile
ls
clear
nvim
nvim
tmux-sessionizer
cmake --version
clear
ls
nvim
nvim
touch file.tex
nvim file.tex
touch markuplanguages.md
nvim markuplanguages.md
brew install latex
clear
nvim markuplanguages.md
clear
ls
touch version-control.md
nvim version-control.md
cd ~/.config/nvim
nvim
cloc .
nvim
ssh-keygen
ls
cd ~/uni-notes
cd exercises
ls
mkdir git-practice
cd git-practice
mkdir test-reop
rm test-reop
rm -r test-reop
mkdir test-repo
cd test-repo
git init
touch main.c
touch lib.c
touch lib.h
git add main.c
git commit -m 'initial commit'
git branch add add_lib
git branch
git branch new add_lib
git branch
git branch --help
git branch add_lib
git switch add_lib
git add lib.c lib.h
git status
git commit -m 'added_lib'
git switch main
git status
nvim main.c
git add main.c
git commit -m "added main function"
git log
git status
git merge --help
git merge --help
git merge add_lib
git status
git log
git log --graph
git diff
git diff 26dc68c
git diff 26dc68c
git diff 26dc68c
git diff 26dc68c
git diff nvim
git status
git tree
git graph
git log --graph
quit
ls
cd ..
ls
mkdir test-remote-repo
touch readme.md
gh 
git init
gh create --local .
gh repo create 
gh repo create --local .
gh repo create --help
gh repo create remote-repo-test --private --source=.
ssh-keygen
ls
cd test-remote-repo
ls
cd ..
git status
mv .git test-remote-repo
git status
mv readme.md test-remote-repo
cd test-remote-repo
nvim readme.md
cd ..
ls
pwd
cd ../..
touch software-testing.md
nvim software-testing.md
cloc .
 brew install gcc
gcc --versin
gcc --version
which gcc
file /usr/bin/gcc
ls -l /usr/bin/gcc
ls -l /usr/bin/clang
cd ~/dotfiles/.env
nvim ~/dotfiles/.env
make philosopher.c
make all
man nanosleep
man 3 sleep
nvim build.zig
nvim ~/.config/nvim/lua/core/lsp.lua
nvim build.zig
rm -r *
zig init --help
zig init -m
ls
nvim build.zig
nvim build.zog
nvim build.zig
zig build
nvim
mkdir src
touch src/{main,root}.zgi
mv src/*.zgi src/*.zig
cd src
ls
mr main.zgi main.zig
mv main.zgi main.zig
mv root.zgi main.zig
ls
nvim
brew install anki
nvim ~/.config/zsh/.zshrc
task
task add study hiragana due:today recur:daily
task
task done 2
task
pwd
nvim
cd exercises/git-practice/ci-testing-ex/
pytest
pytest
pytest
clear
clear
git status
git add src
git commit -m "added library and example"
git add pytest.ini test
git commit -m "added testing harness and full test coverage"
git push
git push --set-upstream origin main
clear
cargi install --locked uv
cargo install --locked uv
curl -LsSf https://astral.sh/uv/install.sh
brew install uv
which gcc
rg "/usr/bin/gcc" /etc ~/dotfiles
sudo rg "/usr/bin/gcc" /etc ~/dotfiles
sudo rg "/usr/bin/gcc" /etc ~/dotfiles
rg --help
rg --help
sudo rg /usr/bin/gcc /etc ~/dotfiles
rg /usr/bin/gcc /etc ~/dotfiles
cd ~/gits/zls
ls
ls zig-out
zig build -Doptimize=ReleaseFast
zig --help
zig ls
ls
cd zig-out/bin
ls
ls zig-out
ls
file zig-out/zls
ls
pwd
cd ..
ls
cd bin
cp zls ~/.local/bin
zls
zig fetch --save git+https://github.com/raylib-zig/raylib-zig#devel
pwd
nvim ../../build.zig.zon
cd ~/projects/new-zig
zig fetch --save git+https://github.com/raylib-zig/raylib-zig#devel
zig build
nvim
neomutt
cargo run
clear
ls
clear
ls
tmux-attach
task
task done 2
clear
ls
nvim
ghostty +list-themes
clear
nvim price-report
z
clear
ls
cat readme.md
cd dotfiles
ls
ls -la
nvim .stow-local-ignore
\:q
ls
cd ..
ls -la
rm -r readme.md
ls
clear
ls
cd dotfiles
pwd
stow .
ls ..
nvim .stow-local-ignore
stow .
ls ..
rm ../required-packages.md
stow .
ls ..
cd ..
git status
ls
cd dotfiles
ls
man task-sync
nvim
nvim ~/.config/nvim/lua/plugins/colorscheme.lua
nivm
nvim
nvim ~/.config/ghostty/config 
tmux
ls
nvim
nvim
the quick brown fox jumps over the lazy dog
fastfetch
pfetch
dust /
dust home
dust /home
dust /home/biggerben
dust /home/biggerben
dust ~
dust ~
cleasr
clear
nvim
cd ~/uni-notes
touch discrete-structures-1
mv discrete-structures-1 discrete-structures-1.md
nvim discrete-structures-1.md
nvim discrete-structures-1.md
nvim 
task done 2
clear
clear
make 
./kilotoo
clear
cd ..
ls
clear
ls
clear
cd ~/proj
cd ~/projects
clear
tmux-sessionizer
cd ~/projects
mkdir kilotoo
tmux-sessionizer
clear
cargo ru
cargo run
cargo run
cargo run
clear
cargo run
cargo run
cargo run --release
cargo run
man time
man 5 time
man 3time
man 3 time
man 8 time
man 5 time
nvim
clear
touch nvim
rm nvim
touch readme.md
rustc -03
rustc -03
rustc -O3
rustc --help
mv src/main.rs .
rm src
rm -r src
rm Cargo.*
ls
ls -la
rm -r target
ls
rm -r c_example
nvim
ls
nvim readme.md
make run
nvim
make run
nvim
make run
make run
make run
objdump -D out_c
objdump -d out_c
objdump -d out_rust
git init
git add .
nvim
make run
make run
objdump -d out_rust
objdump -d out_rust | nvim
clear
objdump -d out_rust | nvim
clear
nvim
make run
make run
make run
clear
make run
nvim Makefile
make run
make run
man utime
nvim
nvim
nvim
make out_rust
objdump -d out_rust
objdump -d out_rust | nvim
make out_rust
rm out_rust
make out_rust
objdump -o out_rust
objdump -d out_rust
objdump -d out_rust | nvim
nvim
nvim
nvim
make run_unoptimized
nvim
make run_unoptimized
nvim
make run_unoptimized
make run_unoptimized
nvim
make run_unoptimized
nvim
make run_unoptimized
ls
nvim
make run_unoptimized
nvim
touch .gitignore
nvim .gitignore
git status
git rm out_*
git status
git rm --cached out_rust out_c
clear
clear
ls
git status
git add .
git commit -m "initial commit"
gh repo create rust-c-anti-bullshit-test --public --source=.
git push origin main
git remote add origin git@github.com:BiggerBen13/rust-c-anti-bullshit-test.git
git push 
git push origin master
clera
git status
nvim
nvim
make run_unoptimized
hyperfine
cargo install --locked hyperfine
hyperfine --help
hyperfine out_c_noopt out_rust_noopt
./out_rust_noopt
./out_c_noopt
hyperfine out_c_noopt out_rust_noopt
hyperfine out_c_noopt out_rust_noopt
hyperfine out_c_noopt out_rust_noopt
nvim
nvim main.c
make out_rust_noopt
make out_c_noopt
hyperfine out_c_noopt out_rust_noopt
hyperfine out_c_noopt out_rust_noopt
hyperfine out_c_noopt out_rust_noopt
hyperfine out_c_noopt
hyperfine out_c_noopt --show-output
hyperfine ./out_c_noopt ./out_rust_noopt
hyperfine --runs=100 ./out_c_noopt ./out_rust_noopt
hyperfine --help
hyperfine --runs=100 ./out_c_noopt ./out_rust_noopt --export-markdown timings.md
nvim timings.md
git branch --switch no_io_version
git branch no_io_version
git branch --switch no_io_version
git checkout no_io_version 
git add main.c
git add main.rs
git commit -m "removed timing and output for better external benchmarking"
git push
git push orign
git push origin
git push origin no_io_version
git checkout master
git status
git add readme.md
git commit -m "added hyperfine results to readme"
git push origin master
nvim
git add readme.md
git commit -m "fixed typo"
git pus
git push origin master
cd ~
ls
cd Desktop
touch main.c
nvim main.c
rm main.c
cd ~/projects
ls
cd rust-exp
ls
r2
radare2
brew install libcapstone
brew install capstone
radare2
radare2 out_rust_noopt
clear
ls
clear
tmux-attach
java --help
javac main.java
mv main.java Main.java
javac Main.java
ls
java Main.class
clear
java Main.java
ls
cat Main.class
clear
cd ~/.config/nvim
ls
tree
brew install tree
tree
nvim
nvim
./start
claer
clear
clear
nvim
nvim
nvim
clear
cargo new rust-exp
pwd
mv rust-exp ~/projects
tmux-sessionizer
clear
exit
tmux-sessionizer
clear
killall java
brew install exercism
exercism configure --token=ba439e1e-a2a9-43f6-8e39-a1532dde7a74
exercism download --track=rust --exercise=reverse-string
cd ~/Exercism/rust/reverse-string
ls
nvim src/lib.rs
nvim
cargo test
nvim
exercism
exercism submit
exercism download --track=rust --exercise=sublist
sl
ls
cd ..
cd sublist
ls
nvim
nvim
cargo test
nvim
cargo test
man column
man table
task
task done 2
clear
task --help
task help
task burndown.weekly
clear
cd ~
ls
cd projects
cargo new dllist-rs --lib
cd dllist-rs/tmux-sessionizer
tmux-sessionizer
ls
clear
touch main.java
nvim
nvim ~/.config/nvim/lua/core/config.lua
clear
nvim
touch main.c
nvim main.d
nvim main.c
gcc-15 main.c -o main_c
./main_c
nvim
gcc-15 main.c -o main_c
nvim
./main_c
nvim
touch Tum.java
nvim
clear
touch newmain.java
nvim newmain.java
java newmain.java
nvim
java newmain.java
nvim
jdb Tum.java
nvim
nvim
gcc-15 main.c -o main_c
./main_c
nvim
touch age.java
nvim
nvim age.java
cd ~
ls
clear
cd personal/finance
nvim WG-so-far
pwd
clear
ls
java MyFirstJavaApp.java
java MyFirstJavaApp.java --enable-preview
java --enable-preview MyFirstJavaApp.java
java --enable-preview --source MyFirstJavaApp.java
java --enable-preview --source=. MyFirstJavaApp.java
java --enable-preview --source=./MyFirstJavaApp.java
rm -r *
ls
mkdir src
touch src/Main.java
nvim 
brew install  deno install -A -g -n fabric https://fabricmc.net/cli 
brew install deno
 deno install -A -g -n fabric https://fabricmc.net/cli 
fabric
deno --help
deno 
deno --help
deno ifo
deno info
deno upgrade
brew remove deno
cargo install --locked deno
rustup toolchain
rustup
rustup show
rustup update
rustup toolchain remove stable
rustup toolchain remove all
rustup show
rustup toolchain remove nightly-aarch64-apple-darwin
rustup toolchain remove nightly
rustup show
rustup toolchain remove nightly-2025-02-14-aarch64-apple-darwin
clear
rustup show
rustup default stable
rupstup component remove --toolchain stable miri
rustup component remove --toolchain stable miri
rustup update
rustup
rustup set
rustup set profile
rustup set profile default
rustup update
cargo install --locked deno
deno
deno instal fabric
deno install fabric
 deno install -A -g -n fabric https://fabricmc.net/cli 
deno uninstall fabric
deno list
den 
deno
deno help
ls $HOME/.deno/bin
rm $HOME/.deno/bin/fabric
 deno install -A -g -n fabric https://fabricmc.net/cli 
nvim ~/dotfiles/.env
fabric
cd ~/dotfiles/
nvim .env
cat Main.class
java Main.java
run Main.java
java Main.java
java Main.java
java Main.java
ls
tum Tum.java
java Tum.Java
java Tum.Java
java Tum.Java
java Tum.Java
clear
ls
echo %JAVA_HOME%
echo $JAVA_HOME
touch MyFirstJavaApp.java
java --version
nvim MyFirstJavaApp.java
ls ~/.deno
nvim
nvim
fabric
cd ~/projects
fabric init fabric-test
tmux-sessionizer
clear
ls
tmux-sessionizer
lldb
clear
ls
lldb out_c_noopt
ls
touch main.c
nvim main.c
gcc-15 main.c -O3 -o c_example
./c_example
./c_example
gcc-15 main.c -O3 -o c_example
./c_example
./c_example
touch Makefile
touch readme.md
ls
nvim 
cargo run --release
nvim
rustc -O main.rs
ls
./main
rm main
nvim
nvim
git status
git add .
make run
git run
make run
make run
nvim readme.md
man rustc
rustc --help
rustc -C help
man clang
rustc --help
make run_unoptimized
make run_unoptimized
man termios
clear
rm main.c
git restore main.c
cat main.c
clear
nvim
ls
nvim Makefile
make asm
ls
nvim out_rust.a
nvim out_rust_asm.a
nvim
ls
nvim vec.rs
rustup component
rustup component list
nvim vec.rs
nvim vec.rs
ls
rm vec.rs
cd ..
cargo new rust-superior --lib
cd rust-superior
nvim
cargo build
clear
cargo run
cargo build
nvim
ls
pwd
cd ..
cd rust-exp
ls
rm -r alloc*
ls
rustc
rustc -Z help
rustup default nightly
rustc
rustc -Z help
clear
rustc
neomutt
brew install jdtls
brew search openjdk
brew search openjdk@21
brew install openjdk@21
brew install openjdk@21
brew install openjdk@21
java
jdb
jdb
clear
ls
nvim -O out_rust_asm.a out_c_asm.a
nvim
nvim
nvim -O out_rust_asm.a out_c_asm.a
clear
cd ~
cd ~/projects
mkdir java-intro
tmux-sessionizer
ls
cd rust-exp
touch vec.rs
nvim vec.rs
nvim vec.rs
rust
rustup show
rustup default stable
cd Downloads
ls
tar -xf vulkan-guide-starting-point-2.zip
mv vulkan-guide-starting-point-2 ~/projects
tmux-sessionizer
tmux-sessionizer
tmux-sessionizer
rustc -Z help
rustc
rustc -C help
rustc
nvim
touch main.py
nvim main.py
python3 main.py
python3 main.py
find -mindepth 2 -name "Makefile"
find . -mindepth 2 -name "Makefile"
make run
nvim
make run
make run
ls
make dirs
make run
ls out
make run
make run
make run_rust
make run_rust
make run_rust_unopt
make run_rust_noopt
make run_rust_noopt
make run_python
make
make test
make test
make test
make test
make test
find --help
man find
./test.sh
./test.sh
./test.sh
./test.sh
man find
./test.sh
./test.sh
./test.sh
./test.sh
./test.sh
./test.sh
man getopts
test.sh python cpp rust
./test.sh python cpp rust
./test.sh python cpp rust
./test.sh python cpp rust
man pushd
nvim
touch build.sh
chmod +x build.sh
nvim build.sh
clang --help
/debug
man clang
g++ --version
g++-15 main.cpp -o out_cpp
./out_cpp
./out_cpp
man sed
./add_lang go
ls
./add_lang.sh go
chmod +x add_lang.sh
./add_lang.sh go
./add_lang.sh go
./add_lang.sh go
ls
./add_lang.sh go
./add_lang.sh go
man sed
./add_lang.sh go
ls
./add_lang.sh go
test=hello
echo $test
echo ${test^^}
bash -c echo ${test^^}
bash
./add_lang go
./add_lang.sh go
ls
./add_lang.sh go
./add_lang.sh go
./add_lang.sh go
./add_lang.sh go
./add_lang.sh go
ls
tr
echo "hello" | tr "[:lower:]" "[:upper:]"
hello="Hello"
$hello | "[:lower:]" "[:upper:]"
$hello | tr "[:lower:]" "[:upper:]"
echo $hello | tr "[:lower:]" "[:upper:]"
./add_lang.sh go
./add_lang.sh go
./add_lang.sh go
./add_lang.sh go
ls
ls go
cat go/Makefile
man sed
make run_c
nvim
make run rust
make run_rust
make run_c
nvim
make run_c
make run_cpp
make run_cpp
make run_rust
make run_rust
make run_rust
man sed
./add_lang.sh python
cd python
nvim Makefile
nvim
cd ..
nvim Makefile.template
./add_lang.sh python
pythonc
python --help
man python3
python3 --help
nvim
make run_python
man find
nvim test.sh
./test.sh
./test.sh
./test.sh
./test.sh
./test.sh
./test.sh
hyperfine
hyperfine --help
nvim
./test.sh
ls
cat table.md
cat table.md | pbcopy
nvim readme.md
git status
nvim .gitit
nvim .gitignore
git status
git add Makefile.template
git add add_lang.sh
rm -r build.sh
make run_python
make all
make all
ls
ls out
make all
ls
./test.sh
nvim
make run_c
make run_c_noopt
nvim
ls
nvim
hyperfine --help
cd lua
./main.lua
chmod +x main.lua
./main.lua
./main.lua
clear
nvim
cd zig
pwd
cd ..
ls
cd zig
ls
main.zig
nvim Makefile
zig build-exe main.zig
zig build-exe main.zig
zig build-exe main.zig
zig build-exe main.zig
ls
main
./main
zig build-exe main.zig
zig build-exe main.zig
zig build-exe main.zig
zig build-exe main.zig
./main.zig
ls
./main
./main
./main
lldb main.zig
zig build-exe --help
zig build-exe -O ReleaseFaset main.zig 
zig build-exe -O ReleaseFast main.zig 
./main.zig
./main
./main
./main
./main
./main
./main
./main
./main
hyperfine --runst 1000 main
hyperfine --runs 1000 ./main
hyperfine --runs 1000 --shell=none ./main
hyperfine --runs 1000 --shell=none ./main
hyperfine --runs 1000 --shell=none ./main
hyperfine --runs 10000 --shell=none --warmup 1000 ./main
hyperfine --runs 100000 --shell=none --warmup 1000 ./main
hyperfine --runs 100000 --shell=none --warmup 1000 ./main
zig build-exe -O ReleaseFast main.zig 
hyperfine --runs 100000 --shell=none --warmup 1000 ./main
tmux-sessionizer
clear
pwd
zig build-exe -O ReleaseFast
zig build-exe main.zig -O ReleaseFast -femit-bin=../out/out_zig
ls ../out
nvim
killall nvim
make run_zig
make run_zig
cd ..
make run_zig
zig build-exe 
zig build-exe --help
make run_zig
make run_zig_noopt
make run_zig_noopt
git add zig
git commit -m "add zig"
git push origin master
cd ~/uni-notes
touch computer-architecture.md
nvim computer-architecture.md
clear
cd ~/uni-notes
nvim
mv generations_of_computer_architecture generations_of_computer_architecture.md
